import os
import logging
import asyncio
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, 
    ConversationHandler, CallbackQueryHandler, ContextTypes,
    filters
)
from dotenv import load_dotenv
from database import init_db, get_session, Product, Order, OrderItem, Table

# C·∫•u h√¨nh logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# Load bi·∫øn m√¥i tr∆∞·ªùng
load_dotenv()
TOKEN = os.getenv('TELEGRAM_TOKEN')
if not TOKEN:
    # Fallback to direct token if not in environment variables
    TOKEN = '7705072328:AAElGoUVLaXNnbwsMyBg59tWOCXNdVtHkz4'
ADMIN_ID = 6079753756

# Tr·∫°ng th√°i h·ªôi tho·∫°i
(MAIN_MENU, ADMIN_MENU, VIEW_MENU, ORDER_ITEMS, CONFIRM_ORDER, 
 ADD_PRODUCT, EDIT_PRODUCT, VIEW_ORDERS, MANAGE_TABLES,
 EDIT_PRODUCT_NAME, EDIT_PRODUCT_PRICE, EDIT_PRODUCT_CATEGORY, EDIT_PRODUCT_DESCRIPTION, EDIT_PRODUCT_AVAILABILITY) = range(14)

# Kh·ªüi t·∫°o database
init_db()

def is_admin(user_id):
    """Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ph·∫£i l√† admin hay kh√¥ng"""
    return user_id == ADMIN_ID

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """X·ª≠ l√Ω l·ªánh /start v√† hi·ªÉn th·ªã menu ch√≠nh"""
    user = update.effective_user
    user_id = user.id
    
    context.user_data.clear()  # X√≥a d·ªØ li·ªáu phi√™n hi·ªán t·∫°i
    
    if is_admin(user_id):
        # Menu cho admin
        keyboard = [
            [InlineKeyboardButton("üìã Xem Menu", callback_data='view_menu')],
            [InlineKeyboardButton("üìù Qu·∫£n l√Ω S·∫£n ph·∫©m", callback_data='manage_products')],
            [InlineKeyboardButton("üõéÔ∏è Qu·∫£n l√Ω ƒê∆°n h√†ng", callback_data='manage_orders')],
            [InlineKeyboardButton("ü™ë Qu·∫£n l√Ω B√†n", callback_data='manage_tables')],
            [InlineKeyboardButton("üìä B√°o c√°o", callback_data='reports')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            f'Xin ch√†o Admin {user.first_name}! Ch·ªçn m·ªôt t√πy ch·ªçn:',
            reply_markup=reply_markup
        )
        return ADMIN_MENU
    else:
        # Menu cho kh√°ch h√†ng
        keyboard = [
            [InlineKeyboardButton("üìã Xem Menu", callback_data='view_menu')],
            [InlineKeyboardButton("üõí ƒê·∫∑t m√≥n", callback_data='place_order')],
            [InlineKeyboardButton("ü™ë ƒê·∫∑t b√†n", callback_data='reserve_table')],
            [InlineKeyboardButton("üì± Li√™n h·ªá", callback_data='contact')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            f'Xin ch√†o {user.first_name}! Ch√†o m·ª´ng ƒë·∫øn v·ªõi Qu√°n Cafe c·ªßa ch√∫ng t√¥i!',
            reply_markup=reply_markup
        )
        return MAIN_MENU

async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """X·ª≠ l√Ω c√°c callback t·ª´ menu ch√≠nh"""
    query = update.callback_query
    await query.answer()
    choice = query.data
    
    if choice == 'view_menu':
        return await show_menu_categories(update, context)
    elif choice == 'place_order':
        return await start_order(update, context)
    elif choice == 'reserve_table':
        return await show_tables(update, context)
    elif choice.startswith('reserve_') and choice != 'reserve_table':
        # X·ª≠ l√Ω ƒë·∫∑t b√†n khi ng∆∞·ªùi d√πng ch·ªçn m·ªôt b√†n c·ª• th·ªÉ
        return await reserve_table(update, context)
    elif choice.startswith('order_cat_'):
        # X·ª≠ l√Ω khi ng∆∞·ªùi d√πng ch·ªçn danh m·ª•c ƒë·ªÉ ƒë·∫∑t m√≥n
        return await show_category_products(update, context)
    elif choice.startswith('add_item_'):
        # X·ª≠ l√Ω khi ng∆∞·ªùi d√πng th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng
        return await add_to_cart(update, context)
    elif choice == 'view_cart':
        # Xem gi·ªè h√†ng
        return await view_cart(update, context)
    elif choice == 'clear_cart':
        # X√≥a gi·ªè h√†ng
        return await clear_cart(update, context)
    elif choice == 'confirm_order':
        # X√°c nh·∫≠n ƒë∆°n h√†ng
        return await confirm_order(update, context)
    elif choice == 'contact':
        await query.edit_message_text(
            text="üì± *Th√¥ng tin li√™n h·ªá:*\n\n"
                 "‚òéÔ∏è ƒêi·ªán tho·∫°i: 0123456789\n"
                 "üìß Email: cafe@example.com\n"
                 "üåê Website: www.example.com\n"
                 "üè† ƒê·ªãa ch·ªâ: 123 ƒê∆∞·ªùng ABC, Qu·∫≠n XYZ, TP.HCM",
            parse_mode='Markdown'
        )
        # Th√™m n√∫t quay l·∫°i
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='back_to_main')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_reply_markup(reply_markup=reply_markup)
        return MAIN_MENU
    elif choice == 'back_to_main':
        return await start(update, context)
    elif choice == 'manage_products' and is_admin(update.effective_user.id):
        return await admin_manage_products(update, context)
    elif choice == 'manage_orders' and is_admin(update.effective_user.id):
        return await admin_manage_orders(update, context)
    elif choice == 'manage_tables' and is_admin(update.effective_user.id):
        return await admin_manage_tables(update, context)
    elif choice == 'reports' and is_admin(update.effective_user.id):
        return await admin_reports(update, context)
    elif choice == 'add_product' and is_admin(update.effective_user.id):
        # Chuy·ªÉn qua form nh·∫≠p th√¥ng tin s·∫£n ph·∫©m
        context.user_data['add_product_step'] = 'name'
        
        # H∆∞·ªõng d·∫´n chi ti·∫øt
        help_text = (
            "*H∆∞·ªõng d·∫´n th√™m s·∫£n ph·∫©m m·ªõi:*\n\n"
            "Quy tr√¨nh th√™m s·∫£n ph·∫©m g·ªìm 4 b∆∞·ªõc ƒë∆°n gi·∫£n:\n"
            "1Ô∏è‚É£ Nh·∫≠p t√™n s·∫£n ph·∫©m\n"
            "2Ô∏è‚É£ Nh·∫≠p gi√° (ch·ªâ nh·∫≠p s·ªë, kh√¥ng d·∫•u ph·∫©y)\n"
            "3Ô∏è‚É£ Ch·ªçn ho·∫∑c t·∫°o danh m·ª•c\n"
            "4Ô∏è‚É£ Nh·∫≠p m√¥ t·∫£ s·∫£n ph·∫©m\n\n"
            "Sau khi ho√†n th√†nh, s·∫£n ph·∫©m s·∫Ω ƒë∆∞·ª£c t·ª± ƒë·ªông th√™m v√†o h·ªá th·ªëng.\n\n"
            "*B·∫Øt ƒë·∫ßu b∆∞·ªõc 1:*"
        )
        
        await query.edit_message_text(
            text=f"{help_text}\n\n"
                 "*Th√™m s·∫£n ph·∫©m m·ªõi - B∆∞·ªõc 1/4*\n\n"
                 "Vui l√≤ng nh·∫≠p *t√™n s·∫£n ph·∫©m*:",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i menu qu·∫£n l√Ω", callback_data='manage_products')]])
        )
        return ADD_PRODUCT
    elif choice == 'list_products' and is_admin(update.effective_user.id):
        return await list_products(update, context)
    elif choice.startswith('edit_product_') and is_admin(update.effective_user.id):
        return await edit_product(update, context)
    elif choice.startswith('edit_name_') and is_admin(update.effective_user.id):
        return await edit_product_name(update, context)
    elif choice.startswith('edit_price_') and is_admin(update.effective_user.id):
        return await edit_product_price(update, context)
    elif choice.startswith('edit_category_') and is_admin(update.effective_user.id):
        return await edit_product_category(update, context)
    elif choice.startswith('edit_description_') and is_admin(update.effective_user.id):
        return await edit_product_description(update, context)
    elif choice.startswith('toggle_availability_') and is_admin(update.effective_user.id):
        return await toggle_product_availability(update, context)
    elif choice.startswith('set_category_') and is_admin(update.effective_user.id):
        return await set_product_category(update, context)
    
    return MAIN_MENU

async def show_menu_categories(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Hi·ªÉn th·ªã danh m·ª•c s·∫£n ph·∫©m"""
    query = update.callback_query
    session = get_session()
    
    try:
        # L·∫•y c√°c danh m·ª•c s·∫£n ph·∫©m
        categories = session.query(Product.category).distinct().all()
        categories = [category[0] for category in categories]
        
        keyboard = []
        for category in categories:
            keyboard.append([InlineKeyboardButton(f"{category}", callback_data=f"category_{category}")])
        
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='back_to_main')])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if query:
            await query.edit_message_text(text="Ch·ªçn danh m·ª•c:", reply_markup=reply_markup)
        else:
            await update.message.reply_text(text="Ch·ªçn danh m·ª•c:", reply_markup=reply_markup)
    finally:
        session.close()
    
    return VIEW_MENU

async def show_category_items(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Hi·ªÉn th·ªã c√°c s·∫£n ph·∫©m trong danh m·ª•c"""
    query = update.callback_query
    await query.answer()
    
    # L·∫•y t√™n danh m·ª•c t·ª´ callback data
    category = query.data.replace("category_", "")
    
    session = get_session()
    try:
        # L·∫•y s·∫£n ph·∫©m theo danh m·ª•c
        products = session.query(Product).filter(
            Product.category == category,
            Product.is_available == True
        ).all()
        
        if not products:
            await query.edit_message_text(
                text=f"Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o trong danh m·ª•c {category}",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='view_menu')]])
            )
            return VIEW_MENU
        
        text = f"*Danh m·ª•c: {category}*\n\n"
        for product in products:
            text += f"*{product.name}* - _{product.price:,.0f} VNƒê_\n{product.description or 'Kh√¥ng c√≥ m√¥ t·∫£'}\n\n"
        
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='view_menu')]]
        if is_admin(update.effective_user.id):
            keyboard.append([InlineKeyboardButton("‚úèÔ∏è Ch·ªânh s·ª≠a danh m·ª•c", callback_data=f'edit_category_{category}')])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text=text, reply_markup=reply_markup, parse_mode='Markdown')
    finally:
        session.close()
    
    return VIEW_MENU

async def start_order(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """B·∫Øt ƒë·∫ßu quy tr√¨nh ƒë·∫∑t h√†ng"""
    query = update.callback_query
    await query.answer()
    
    # Kh·ªüi t·∫°o gi·ªè h√†ng tr·ªëng n·∫øu ch∆∞a c√≥
    if 'cart' not in context.user_data:
        context.user_data['cart'] = []
    
    # Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ ƒë·∫∑t b√†n ch∆∞a
    selected_table = context.user_data.get('selected_table')
    table_info = f"ü™ë B√†n ƒë√£ ch·ªçn: B√†n {selected_table['number']}\n\n" if selected_table else ""
    
    session = get_session()
    try:
        # L·∫•y danh m·ª•c s·∫£n ph·∫©m ƒë·ªÉ hi·ªÉn th·ªã
        categories = session.query(Product.category).distinct().all()
        categories = [category[0] for category in categories]
        
        keyboard = []
        for category in categories:
            keyboard.append([InlineKeyboardButton(f"{category}", callback_data=f"order_cat_{category}")])
        
        keyboard.append([InlineKeyboardButton("üõí Xem gi·ªè h√†ng", callback_data='view_cart')])
        
        # Th√™m t√πy ch·ªçn ƒë·∫∑t b√†n n·∫øu ch∆∞a ƒë·∫∑t
        if not selected_table:
            keyboard.append([InlineKeyboardButton("ü™ë ƒê·∫∑t b√†n tr∆∞·ªõc", callback_data='reserve_table')])
            
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='back_to_main')])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text=f"{table_info}Ch·ªçn danh m·ª•c ƒë·ªÉ ƒë·∫∑t m√≥n:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    finally:
        session.close()
    
    return ORDER_ITEMS

async def admin_manage_products(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Giao di·ªán qu·∫£n l√Ω s·∫£n ph·∫©m cho admin"""
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("‚ûï Th√™m s·∫£n ph·∫©m m·ªõi", callback_data='add_product')],
        [InlineKeyboardButton("üìã Xem & S·ª≠a s·∫£n ph·∫©m", callback_data='list_products')],
        [InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='back_to_main')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text="*Qu·∫£n l√Ω S·∫£n ph·∫©m*\nCh·ªçn m·ªôt t√πy ch·ªçn:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    return ADMIN_MENU

async def admin_manage_orders(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Giao di·ªán qu·∫£n l√Ω ƒë∆°n h√†ng cho admin"""
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("üìã ƒê∆°n h√†ng ƒëang ch·ªù", callback_data='pending_orders')],
        [InlineKeyboardButton("‚úÖ ƒê∆°n h√†ng ƒë√£ x√°c nh·∫≠n", callback_data='confirmed_orders')],
        [InlineKeyboardButton("üíØ ƒê∆°n h√†ng ƒë√£ ho√†n th√†nh", callback_data='completed_orders')],
        [InlineKeyboardButton("‚ùå ƒê∆°n h√†ng ƒë√£ h·ªßy", callback_data='cancelled_orders')],
        [InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='back_to_main')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text="*Qu·∫£n l√Ω ƒê∆°n h√†ng*\nCh·ªçn danh s√°ch ƒë∆°n h√†ng:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    return ADMIN_MENU

async def admin_manage_tables(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Giao di·ªán qu·∫£n l√Ω b√†n cho admin"""
    query = update.callback_query
    await query.answer()
    
    session = get_session()
    try:
        tables = session.query(Table).order_by(Table.number).all()
        
        if not tables:
            keyboard = [
                [InlineKeyboardButton("‚ûï Th√™m b√†n m·ªõi", callback_data='add_table')],
                [InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='back_to_main')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                text="*Qu·∫£n l√Ω B√†n*\nKh√¥ng c√≥ b√†n n√†o. H√£y th√™m b√†n m·ªõi.",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        else:
            text = "*Danh s√°ch b√†n:*\n\n"
            for table in tables:
                status = "üî¥ ƒê√£ ƒë·∫∑t" if table.is_reserved else "üü¢ Tr·ªëng"
                text += f"B√†n {table.number} - {table.capacity} ch·ªó - {status}\n"
            
            keyboard = [
                [InlineKeyboardButton("‚ûï Th√™m b√†n m·ªõi", callback_data='add_table')],
                [InlineKeyboardButton("‚úèÔ∏è Ch·ªânh s·ª≠a b√†n", callback_data='edit_tables')],
                [InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='back_to_main')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                text=text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
    finally:
        session.close()
    
    return ADMIN_MENU

async def admin_reports(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Hi·ªÉn th·ªã b√°o c√°o cho admin"""
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("üìä Doanh thu h√¥m nay", callback_data='report_today')],
        [InlineKeyboardButton("üìà Doanh thu tu·∫ßn n√†y", callback_data='report_week')],
        [InlineKeyboardButton("üìâ Doanh thu th√°ng n√†y", callback_data='report_month')],
        [InlineKeyboardButton("üîù S·∫£n ph·∫©m b√°n ch·∫°y", callback_data='report_top_products')],
        [InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='back_to_main')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text="*B√°o c√°o*\nCh·ªçn lo·∫°i b√°o c√°o:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    return ADMIN_MENU

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """X·ª≠ l√Ω l·ªói"""
    logger.error(f"Update {update} caused error {context.error}")

async def show_tables(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Hi·ªÉn th·ªã danh s√°ch b√†n"""
    query = update.callback_query
    await query.answer()
    
    session = get_session()
    try:
        tables = session.query(Table).filter(Table.is_reserved == False).order_by(Table.number).all()
        
        if not tables:
            await query.edit_message_text(
                text="Hi·ªán t·∫°i t·∫•t c·∫£ c√°c b√†n ƒë·ªÅu ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t. Vui l√≤ng quay l·∫°i sau!",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='back_to_main')]])
            )
        else:
            text = "*C√°c b√†n c√≤n tr·ªëng:*\n\n"
            keyboard = []
            for table in tables:
                text += f"B√†n {table.number} - {table.capacity} ch·ªó\n"
                keyboard.append([InlineKeyboardButton(f"ƒê·∫∑t b√†n {table.number}", callback_data=f'reserve_{table.id}')])
            
            keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='back_to_main')])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                text=text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
    finally:
        session.close()
    
    return MAIN_MENU

async def reserve_table(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """X·ª≠ l√Ω ƒë·∫∑t b√†n"""
    query = update.callback_query
    await query.answer()
    
    # L·∫•y ID b√†n t·ª´ callback data
    table_id = int(query.data.split('_')[1])
    
    session = get_session()
    try:
        table = session.query(Table).get(table_id)
        if not table:
            await query.edit_message_text(
                text="‚ùå Kh√¥ng t√¨m th·∫•y b√†n n√†y!",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='reserve_table')]])
            )
            return MAIN_MENU
        
        if table.is_reserved:
            await query.edit_message_text(
                text="‚ùå B√†n n√†y ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t! Vui l√≤ng ch·ªçn b√†n kh√°c.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Xem b√†n kh√°c", callback_data='reserve_table')]])
            )
            return MAIN_MENU
        
        # ƒê·∫∑t b√†n
        table.is_reserved = True
        session.commit()
        
        # L∆∞u s·ªë b√†n v√†o user_data ƒë·ªÉ s·ª≠ d·ª•ng khi ƒë·∫∑t m√≥n
        context.user_data['selected_table'] = {
            'id': table.id,
            'number': table.number
        }
        
        # Hi·ªÉn th·ªã tin nh·∫Øn th√†nh c√¥ng v√† ƒë·ªÅ xu·∫•t ƒë·∫∑t m√≥n
        keyboard = [
            [InlineKeyboardButton("üçΩÔ∏è ƒê·∫∑t m√≥n ngay", callback_data='place_order')],
            [InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i Menu ch√≠nh", callback_data='back_to_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text=f"‚úÖ *ƒê·∫∑t b√†n th√†nh c√¥ng!*\n\n"
                 f"B·∫°n ƒë√£ ƒë·∫∑t *B√†n {table.number}* - {table.capacity} ch·ªó.\n\n"
                 f"B·∫°n c√≥ th·ªÉ ƒë·∫∑t m√≥n ngay b√¢y gi·ªù ho·∫∑c quay l·∫°i menu ch√≠nh.",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
        return MAIN_MENU
    except Exception as e:
        session.rollback()
        await query.edit_message_text(
            text=f"‚ùå C√≥ l·ªói x·∫£y ra khi ƒë·∫∑t b√†n: {str(e)}",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Th·ª≠ l·∫°i", callback_data='reserve_table')]])
        )
        return MAIN_MENU
    finally:
        session.close()

async def add_product(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """X·ª≠ l√Ω th√™m s·∫£n ph·∫©m m·ªõi d·∫°ng form t·ª´ng b∆∞·ªõc"""
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán ch·ª©c nƒÉng n√†y.")
        return MAIN_MENU

    text = update.message.text
    step = context.user_data.get('add_product_step', 'name')
    
    if step == 'name':
        # L∆∞u t√™n s·∫£n ph·∫©m
        context.user_data['product_name'] = text
        context.user_data['add_product_step'] = 'price'
        
        await update.message.reply_text(
            "*Th√™m s·∫£n ph·∫©m m·ªõi - B∆∞·ªõc 2/4*\n\n"
            f"T√™n s·∫£n ph·∫©m: *{text}*\n\n"
            "Vui l√≤ng nh·∫≠p *gi√° s·∫£n ph·∫©m*:\n"
            "‚Ä¢ Ch·ªâ nh·∫≠p s·ªë, kh√¥ng c·∫ßn nh·∫≠p d·∫•u ph·∫©y hay ƒë∆°n v·ªã ti·ªÅn\n"
            "‚Ä¢ V√≠ d·ª•: 25000 (cho s·∫£n ph·∫©m gi√° 25,000 VNƒê)\n"
            "‚Ä¢ Gi√° ph·∫£i l√† s·ªë d∆∞∆°ng",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è H·ªßy thao t√°c", callback_data='manage_products')]])
        )
        return ADD_PRODUCT
        
    elif step == 'price':
        # Ki·ªÉm tra v√† l∆∞u gi√° s·∫£n ph·∫©m
        try:
            price = int(text)
            if price <= 0:
                raise ValueError("Gi√° ph·∫£i l√† s·ªë d∆∞∆°ng")
            
            context.user_data['product_price'] = price
            context.user_data['add_product_step'] = 'category'
            
            # L·∫•y c√°c danh m·ª•c hi·ªán c√≥ ƒë·ªÉ g·ª£i √Ω
            session = get_session()
            try:
                categories = session.query(Product.category).distinct().all()
                categories = [category[0] for category in categories]
                
                if categories:
                    category_text = "*C√°c danh m·ª•c hi·ªán c√≥:*\n"
                    for category in categories:
                        category_text += f"‚Ä¢ {category}\n"
                    
                    category_text += "\n*L∆∞u √Ω:*\n‚Ä¢ B·∫°n c√≥ th·ªÉ ch·ªçn m·ªôt danh m·ª•c c√≥ s·∫µn ho·∫∑c t·∫°o danh m·ª•c m·ªõi\n‚Ä¢ N√™n vi·∫øt ƒë√∫ng ch√≠nh t·∫£ v√† ƒë·ªãnh d·∫°ng c·ªßa danh m·ª•c"
                else:
                    category_text = "*Ch∆∞a c√≥ danh m·ª•c n√†o ƒë∆∞·ª£c t·∫°o*\nB·∫°n s·∫Ω t·∫°o danh m·ª•c ƒë·∫ßu ti√™n cho h·ªá th·ªëng."
            except Exception:
                category_text = ""
            finally:
                session.close()
            
            await update.message.reply_text(
                "*Th√™m s·∫£n ph·∫©m m·ªõi - B∆∞·ªõc 3/4*\n\n"
                f"T√™n s·∫£n ph·∫©m: *{context.user_data['product_name']}*\n"
                f"Gi√°: *{price:,} VNƒê*\n\n"
                f"Vui l√≤ng nh·∫≠p *danh m·ª•c* cho s·∫£n ph·∫©m:\n\n{category_text}",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è H·ªßy thao t√°c", callback_data='manage_products')]])
            )
            return ADD_PRODUCT
            
        except ValueError:
            await update.message.reply_text(
                "‚ùå *L·ªói: Gi√° s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá!*\n\n"
                "Gi√° s·∫£n ph·∫©m ph·∫£i l√† s·ªë d∆∞∆°ng v√† ch·ªâ ch·ª©a c√°c ch·ªØ s·ªë.\n"
                "V√≠ d·ª•: 25000 (cho s·∫£n ph·∫©m gi√° 25,000 VNƒê)\n\n"
                "Vui l√≤ng nh·∫≠p l·∫°i gi√° s·∫£n ph·∫©m:",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è H·ªßy thao t√°c", callback_data='manage_products')]])
            )
            return ADD_PRODUCT
            
    elif step == 'category':
        # L∆∞u danh m·ª•c s·∫£n ph·∫©m
        context.user_data['product_category'] = text
        context.user_data['add_product_step'] = 'description'
        
        await update.message.reply_text(
            "*Th√™m s·∫£n ph·∫©m m·ªõi - B∆∞·ªõc 4/4*\n\n"
            f"T√™n s·∫£n ph·∫©m: *{context.user_data['product_name']}*\n"
            f"Gi√°: *{context.user_data['product_price']:,} VNƒê*\n"
            f"Danh m·ª•c: *{text}*\n\n"
            "Vui l√≤ng nh·∫≠p *m√¥ t·∫£* cho s·∫£n ph·∫©m:\n"
            "‚Ä¢ M√¥ t·∫£ n√™n ng·∫Øn g·ªçn nh∆∞ng ƒë·∫ßy ƒë·ªß th√¥ng tin\n"
            "‚Ä¢ N·∫øu kh√¥ng c√≥ m√¥ t·∫£, h√£y g·ª≠i d·∫•u '-'\n"
            "‚Ä¢ V√≠ d·ª•: C√† ph√™ pha v·ªõi s·ªØa ƒë·∫∑c, v·ªã ƒë·∫Øng nh·∫π v√† th∆°m b√©o",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è H·ªßy thao t√°c", callback_data='manage_products')]])
        )
        return ADD_PRODUCT
        
    elif step == 'description':
        # L∆∞u m√¥ t·∫£ s·∫£n ph·∫©m v√† th√™m v√†o database
        description = "" if text == "-" else text
        
        session = get_session()
        try:
            # T·∫°o s·∫£n ph·∫©m m·ªõi
            new_product = Product(
                name=context.user_data['product_name'],
                price=context.user_data['product_price'],
                category=context.user_data['product_category'],
                description=description,
                is_available=True
            )
            
            session.add(new_product)
            session.commit()
            
            # X√≥a d·ªØ li·ªáu t·∫°m
            product_name = context.user_data['product_name']
            product_price = context.user_data['product_price']
            product_category = context.user_data['product_category']
            
            context.user_data.pop('product_name', None)
            context.user_data.pop('product_price', None)
            context.user_data.pop('product_category', None)
            context.user_data.pop('add_product_step', None)
            
            # Th√¥ng b√°o th√†nh c√¥ng
            await update.message.reply_text(
                f"‚úÖ *ƒê√£ th√™m s·∫£n ph·∫©m m·ªõi th√†nh c√¥ng!*\n\n"
                f"T√™n: *{product_name}*\n"
                f"Gi√°: *{product_price:,} VNƒê*\n"
                f"Danh m·ª•c: *{product_category}*\n"
                f"M√¥ t·∫£: *{description or 'Kh√¥ng c√≥'}*\n\n"
                f"S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c th√™m v√†o c∆° s·ªü d·ªØ li·ªáu v√† hi·ªÉn th·ªã trong menu.",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚ûï Th√™m s·∫£n ph·∫©m kh√°c", callback_data='add_product')],
                    [InlineKeyboardButton("üìã Xem danh s√°ch s·∫£n ph·∫©m", callback_data='list_products')],
                    [InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i menu qu·∫£n l√Ω", callback_data='manage_products')]
                ])
            )
            return ADMIN_MENU
            
        except Exception as e:
            session.rollback()
            await update.message.reply_text(
                f"‚ùå C√≥ l·ªói x·∫£y ra khi th√™m s·∫£n ph·∫©m: {str(e)}\n\n"
                "Vui l√≤ng th·ª≠ l·∫°i sau.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i menu qu·∫£n l√Ω", callback_data='manage_products')]])
            )
            return ADMIN_MENU
        finally:
            session.close()
    
    # Tr∆∞·ªùng h·ª£p kh√¥ng r∆°i v√†o b·∫•t k·ª≥ b∆∞·ªõc n√†o
    await update.message.reply_text(
        "‚ùå C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh th√™m s·∫£n ph·∫©m.\n\n"
        "Vui l√≤ng th·ª≠ l·∫°i.",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i menu qu·∫£n l√Ω", callback_data='manage_products')]])
    )
    return ADMIN_MENU

async def edit_product(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """X·ª≠ l√Ω ch·ªânh s·ª≠a s·∫£n ph·∫©m"""
    if not is_admin(update.effective_user.id):
        await update.callback_query.answer("B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán ch·ª©c nƒÉng n√†y.")
        return MAIN_MENU

    query = update.callback_query
    await query.answer()
    
    # L·∫•y ID s·∫£n ph·∫©m t·ª´ callback data
    product_id = int(query.data.split('_')[2])
    
    session = get_session()
    try:
        product = session.query(Product).get(product_id)
        if not product:
            await query.edit_message_text(
                "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m!",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i danh s√°ch", callback_data='list_products')]])
            )
            return ADMIN_MENU
            
        # L∆∞u ID s·∫£n ph·∫©m v√†o context ƒë·ªÉ s·ª≠ d·ª•ng trong c√°c h√†m edit_product_*
        context.user_data['editing_product_id'] = product_id
        
        # Hi·ªÉn th·ªã th√¥ng tin s·∫£n ph·∫©m v√† c√°c t√πy ch·ªçn ch·ªânh s·ª≠a
        status = "‚úÖ C√≥ s·∫µn" if product.is_available else "‚ùå H·∫øt h√†ng"
        text = f"*Ch·ªânh s·ª≠a s·∫£n ph·∫©m:*\n\n"
        text += f"*{product.name}*\n"
        text += f"Gi√°: {product.price:,} VNƒê\n"
        text += f"Danh m·ª•c: {product.category}\n"
        text += f"Tr·∫°ng th√°i: {status}\n"
        text += f"M√¥ t·∫£: {product.description or 'Kh√¥ng c√≥'}\n\n"
        text += f"Ch·ªçn th√¥ng tin b·∫°n mu·ªën ch·ªânh s·ª≠a:"
        
        # C√°c t√πy ch·ªçn ch·ªânh s·ª≠a
        keyboard = [
            [InlineKeyboardButton("‚úèÔ∏è S·ª≠a t√™n", callback_data=f'edit_name_{product_id}')],
            [InlineKeyboardButton("üí∞ S·ª≠a gi√°", callback_data=f'edit_price_{product_id}')],
            [InlineKeyboardButton("üìÇ S·ª≠a danh m·ª•c", callback_data=f'edit_category_{product_id}')],
            [InlineKeyboardButton("üìù S·ª≠a m√¥ t·∫£", callback_data=f'edit_description_{product_id}')],
            [InlineKeyboardButton("üîÑ ƒê·ªïi tr·∫°ng th√°i", callback_data=f'toggle_availability_{product_id}')],
            [InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i danh s√°ch", callback_data='list_products')]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            text=text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        return EDIT_PRODUCT
        
    finally:
        session.close()

async def update_product(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """X·ª≠ l√Ω c·∫≠p nh·∫≠t th√¥ng tin s·∫£n ph·∫©m"""
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán ch·ª©c nƒÉng n√†y.")
        return MAIN_MENU

    text = update.message.text
    session = get_session()
    
    try:
        # L·∫•y ID s·∫£n ph·∫©m t·ª´ context
        product_id = context.user_data.get('editing_product_id')
        if not product_id:
            await update.message.reply_text(
                "Kh√¥ng t√¨m th·∫•y th√¥ng tin s·∫£n ph·∫©m c·∫ßn ch·ªânh s·ª≠a!",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='list_products')]])
            )
            return ADMIN_MENU
            
        product = session.query(Product).get(product_id)
        if not product:
            await update.message.reply_text(
                "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m!",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='list_products')]])
            )
            return ADMIN_MENU

        # Ph√¢n t√≠ch th√¥ng tin m·ªõi
        parts = text.split('|')
        if len(parts) < 3:
            await update.message.reply_text(
                "Vui l√≤ng nh·∫≠p th√¥ng tin s·∫£n ph·∫©m theo ƒë·ªãnh d·∫°ng:\n"
                "T√™n m·ªõi | Gi√° m·ªõi | Danh m·ª•c m·ªõi | M√¥ t·∫£ m·ªõi\n\n"
                "V√≠ d·ª•:\n"
                "C√† ph√™ s·ªØa | 25000 | ƒê·ªì u·ªëng | C√† ph√™ v·ªõi s·ªØa ƒë·∫∑c",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='list_products')]])
            )
            return EDIT_PRODUCT

        # C·∫≠p nh·∫≠t th√¥ng tin s·∫£n ph·∫©m
        product.name = parts[0].strip()
        try:
            product.price = int(parts[1].strip())
        except ValueError:
            await update.message.reply_text(
                "Gi√° s·∫£n ph·∫©m ph·∫£i l√† s·ªë!",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='list_products')]])
            )
            return EDIT_PRODUCT
        product.category = parts[2].strip()
        product.description = parts[3].strip() if len(parts) > 3 else ""
        
        session.commit()
        
        # X√≥a ID s·∫£n ph·∫©m kh·ªèi context sau khi c·∫≠p nh·∫≠t th√†nh c√¥ng
        context.user_data.pop('editing_product_id', None)
        
        await update.message.reply_text(
            f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t s·∫£n ph·∫©m:\n\n"
            f"T√™n: {product.name}\n"
            f"Gi√°: {product.price:,} VNƒê\n"
            f"Danh m·ª•c: {product.category}\n"
            f"M√¥ t·∫£: {product.description}",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='list_products')]])
        )
        
        return ADMIN_MENU
        
    except Exception as e:
        session.rollback()
        await update.message.reply_text(
            f"C√≥ l·ªói x·∫£y ra: {str(e)}",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='list_products')]])
        )
        return EDIT_PRODUCT
    finally:
        session.close()

async def list_products(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Hi·ªÉn th·ªã danh s√°ch s·∫£n ph·∫©m cho admin"""
    if not is_admin(update.effective_user.id):
        await update.callback_query.answer("B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán ch·ª©c nƒÉng n√†y.")
        return MAIN_MENU

    query = update.callback_query
    await query.answer()
    
    session = get_session()
    try:
        # L·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m
        products = session.query(Product).all()
        
        if not products:
            await query.edit_message_text(
                "Ch∆∞a c√≥ s·∫£n ph·∫©m n√†o. H√£y th√™m s·∫£n ph·∫©m m·ªõi!",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='manage_products')]])
            )
            return ADMIN_MENU
        
        # T·∫°o danh s√°ch s·∫£n ph·∫©m theo danh m·ª•c
        text = "*Danh s√°ch s·∫£n ph·∫©m:*\n\n"
        keyboard = []
        
        for product in products:
            status = "‚úÖ C√≥ s·∫µn" if product.is_available else "‚ùå H·∫øt h√†ng"
            text += f"*{product.name}*\n"
            text += f"Gi√°: {product.price:,} VNƒê\n"
            text += f"Danh m·ª•c: {product.category}\n"
            text += f"Tr·∫°ng th√°i: {status}\n"
            text += f"M√¥ t·∫£: {product.description or 'Kh√¥ng c√≥'}\n\n"
            
            # Th√™m n√∫t ch·ªânh s·ª≠a cho m·ªói s·∫£n ph·∫©m
            keyboard.append([InlineKeyboardButton(f"‚úèÔ∏è Ch·ªânh s·ª≠a {product.name}", callback_data=f'edit_product_{product.id}')])
        
        # Th√™m n√∫t quay l·∫°i
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='manage_products')])
        
        await query.edit_message_text(
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
        
    finally:
        session.close()
    
    return ADMIN_MENU

async def edit_product_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """X·ª≠ l√Ω ch·ªânh s·ª≠a t√™n s·∫£n ph·∫©m"""
    query = update.callback_query
    await query.answer()
    
    product_id = int(query.data.split('_')[2])
    context.user_data['editing_product_id'] = product_id
    
    session = get_session()
    try:
        product = session.query(Product).get(product_id)
        if not product:
            await query.edit_message_text(
                "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m!",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i danh s√°ch", callback_data='list_products')]])
            )
            return ADMIN_MENU
        
        await query.edit_message_text(
            f"*ƒêang ch·ªânh s·ª≠a t√™n s·∫£n ph·∫©m*\n\n"
            f"T√™n hi·ªán t·∫°i: *{product.name}*\n\n"
            f"Vui l√≤ng nh·∫≠p t√™n m·ªõi cho s·∫£n ph·∫©m:",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô Quay l·∫°i th√¥ng tin s·∫£n ph·∫©m", callback_data=f'edit_product_{product_id}')]])
        )
        return EDIT_PRODUCT_NAME
    finally:
        session.close()

async def edit_product_price(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """X·ª≠ l√Ω ch·ªânh s·ª≠a gi√° s·∫£n ph·∫©m"""
    query = update.callback_query
    await query.answer()
    
    product_id = int(query.data.split('_')[2])
    context.user_data['editing_product_id'] = product_id
    
    session = get_session()
    try:
        product = session.query(Product).get(product_id)
        if not product:
            await query.edit_message_text(
                "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m!",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i danh s√°ch", callback_data='list_products')]])
            )
            return ADMIN_MENU
        
        await query.edit_message_text(
            f"*ƒêang ch·ªânh s·ª≠a gi√° s·∫£n ph·∫©m*\n\n"
            f"S·∫£n ph·∫©m: *{product.name}*\n"
            f"Gi√° hi·ªán t·∫°i: *{product.price:,} VNƒê*\n\n"
            f"Vui l√≤ng nh·∫≠p gi√° m·ªõi (ch·ªâ nh·∫≠p s·ªë, kh√¥ng c√≥ d·∫•u ph·∫©y):",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô Quay l·∫°i th√¥ng tin s·∫£n ph·∫©m", callback_data=f'edit_product_{product_id}')]])
        )
        return EDIT_PRODUCT_PRICE
    finally:
        session.close()

async def edit_product_category(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """X·ª≠ l√Ω ch·ªânh s·ª≠a danh m·ª•c s·∫£n ph·∫©m"""
    query = update.callback_query
    await query.answer()
    
    product_id = int(query.data.split('_')[2])
    context.user_data['editing_product_id'] = product_id
    
    session = get_session()
    try:
        product = session.query(Product).get(product_id)
        if not product:
            await query.edit_message_text(
                "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m!",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i danh s√°ch", callback_data='list_products')]])
            )
            return ADMIN_MENU
        
        # L·∫•y danh s√°ch c√°c danh m·ª•c hi·ªán c√≥
        categories = session.query(Product.category).distinct().all()
        categories = [category[0] for category in categories]
        
        text = f"*ƒêang ch·ªânh s·ª≠a danh m·ª•c s·∫£n ph·∫©m*\n\n"
        text += f"S·∫£n ph·∫©m: *{product.name}*\n"
        text += f"Danh m·ª•c hi·ªán t·∫°i: *{product.category}*\n\n"
        text += f"Vui l√≤ng nh·∫≠p danh m·ª•c m·ªõi (ho·∫∑c ch·ªçn t·ª´ danh s√°ch):"
        
        # T·∫°o keyboard v·ªõi c√°c danh m·ª•c hi·ªán c√≥
        keyboard = []
        for category in categories:
            if category != product.category:
                keyboard.append([InlineKeyboardButton(f"{category}", callback_data=f'set_category_{product_id}_{category}')])
        
        keyboard.append([InlineKeyboardButton("üîô Quay l·∫°i th√¥ng tin s·∫£n ph·∫©m", callback_data=f'edit_product_{product_id}')])
        
        await query.edit_message_text(
            text=text,
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return EDIT_PRODUCT_CATEGORY
    finally:
        session.close()

async def edit_product_description(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """X·ª≠ l√Ω ch·ªânh s·ª≠a m√¥ t·∫£ s·∫£n ph·∫©m"""
    query = update.callback_query
    await query.answer()
    
    product_id = int(query.data.split('_')[2])
    context.user_data['editing_product_id'] = product_id
    
    session = get_session()
    try:
        product = session.query(Product).get(product_id)
        if not product:
            await query.edit_message_text(
                "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m!",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i danh s√°ch", callback_data='list_products')]])
            )
            return ADMIN_MENU
        
        await query.edit_message_text(
            f"*ƒêang ch·ªânh s·ª≠a m√¥ t·∫£ s·∫£n ph·∫©m*\n\n"
            f"S·∫£n ph·∫©m: *{product.name}*\n"
            f"M√¥ t·∫£ hi·ªán t·∫°i: *{product.description or 'Kh√¥ng c√≥'}*\n\n"
            f"Vui l√≤ng nh·∫≠p m√¥ t·∫£ m·ªõi cho s·∫£n ph·∫©m:",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô Quay l·∫°i th√¥ng tin s·∫£n ph·∫©m", callback_data=f'edit_product_{product_id}')]])
        )
        return EDIT_PRODUCT_DESCRIPTION
    finally:
        session.close()

async def toggle_product_availability(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """ƒê·ªïi tr·∫°ng th√°i s·∫£n ph·∫©m (c√≥ s·∫µn/h·∫øt h√†ng)"""
    query = update.callback_query
    await query.answer()
    
    product_id = int(query.data.split('_')[2])
    
    session = get_session()
    try:
        product = session.query(Product).get(product_id)
        if not product:
            await query.edit_message_text(
                "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m!",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i danh s√°ch", callback_data='list_products')]])
            )
            return ADMIN_MENU
        
        # ƒê·ªïi tr·∫°ng th√°i s·∫£n ph·∫©m
        product.is_available = not product.is_available
        session.commit()
        
        status = "‚úÖ C√≥ s·∫µn" if product.is_available else "‚ùå H·∫øt h√†ng"
        await query.edit_message_text(
            f"‚úÖ ƒê√£ ƒë·ªïi tr·∫°ng th√°i s·∫£n ph·∫©m *{product.name}* th√†nh *{status}*",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô Quay l·∫°i th√¥ng tin s·∫£n ph·∫©m", callback_data=f'edit_product_{product_id}')]])
        )
        return EDIT_PRODUCT
    finally:
        session.close()

async def save_product_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """L∆∞u t√™n m·ªõi cho s·∫£n ph·∫©m"""
    new_name = update.message.text
    product_id = context.user_data.get('editing_product_id')
    
    if not product_id:
        await update.message.reply_text(
            "Kh√¥ng t√¨m th·∫•y th√¥ng tin s·∫£n ph·∫©m c·∫ßn ch·ªânh s·ª≠a!",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i danh s√°ch", callback_data='list_products')]])
        )
        return ADMIN_MENU
    
    session = get_session()
    try:
        product = session.query(Product).get(product_id)
        if not product:
            await update.message.reply_text(
                "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m!",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i danh s√°ch", callback_data='list_products')]])
            )
            return ADMIN_MENU
        
        old_name = product.name
        product.name = new_name
        session.commit()
        
        await update.message.reply_text(
            f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t t√™n s·∫£n ph·∫©m:\n\n"
            f"T√™n c≈©: *{old_name}*\n"
            f"T√™n m·ªõi: *{new_name}*",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô Quay l·∫°i s·∫£n ph·∫©m", callback_data=f'edit_product_{product_id}')]])
        )
        return EDIT_PRODUCT
    except Exception as e:
        session.rollback()
        await update.message.reply_text(
            f"C√≥ l·ªói x·∫£y ra: {str(e)}",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîÑ Th·ª≠ l·∫°i", callback_data=f'edit_name_{product_id}')]])
        )
        return EDIT_PRODUCT_NAME
    finally:
        session.close()

async def save_product_price(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """L∆∞u gi√° m·ªõi cho s·∫£n ph·∫©m"""
    new_price_text = update.message.text
    product_id = context.user_data.get('editing_product_id')
    
    if not product_id:
        await update.message.reply_text(
            "Kh√¥ng t√¨m th·∫•y th√¥ng tin s·∫£n ph·∫©m c·∫ßn ch·ªânh s·ª≠a!",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i danh s√°ch", callback_data='list_products')]])
        )
        return ADMIN_MENU
    
    session = get_session()
    try:
        product = session.query(Product).get(product_id)
        if not product:
            await update.message.reply_text(
                "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m!",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i danh s√°ch", callback_data='list_products')]])
            )
            return ADMIN_MENU
        
        try:
            new_price = int(new_price_text)
            if new_price <= 0:
                raise ValueError("Gi√° ph·∫£i l√† s·ªë d∆∞∆°ng")
        except ValueError:
            await update.message.reply_text(
                "‚ùå Gi√° s·∫£n ph·∫©m ph·∫£i l√† s·ªë d∆∞∆°ng!",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîÑ Th·ª≠ l·∫°i", callback_data=f'edit_price_{product_id}')],
                    [InlineKeyboardButton("üîô Quay l·∫°i s·∫£n ph·∫©m", callback_data=f'edit_product_{product_id}')]
                ])
            )
            return EDIT_PRODUCT_PRICE
        
        old_price = product.price
        product.price = new_price
        session.commit()
        
        await update.message.reply_text(
            f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t gi√° s·∫£n ph·∫©m *{product.name}*:\n\n"
            f"Gi√° c≈©: *{old_price:,} VNƒê*\n"
            f"Gi√° m·ªõi: *{new_price:,} VNƒê*",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô Quay l·∫°i s·∫£n ph·∫©m", callback_data=f'edit_product_{product_id}')]])
        )
        return EDIT_PRODUCT
    except Exception as e:
        session.rollback()
        await update.message.reply_text(
            f"C√≥ l·ªói x·∫£y ra: {str(e)}",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîÑ Th·ª≠ l·∫°i", callback_data=f'edit_price_{product_id}')]])
        )
        return EDIT_PRODUCT_PRICE
    finally:
        session.close()

async def save_product_category(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """L∆∞u danh m·ª•c m·ªõi cho s·∫£n ph·∫©m"""
    new_category = update.message.text
    product_id = context.user_data.get('editing_product_id')
    
    if not product_id:
        await update.message.reply_text(
            "Kh√¥ng t√¨m th·∫•y th√¥ng tin s·∫£n ph·∫©m c·∫ßn ch·ªânh s·ª≠a!",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i danh s√°ch", callback_data='list_products')]])
        )
        return ADMIN_MENU
    
    session = get_session()
    try:
        product = session.query(Product).get(product_id)
        if not product:
            await update.message.reply_text(
                "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m!",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i danh s√°ch", callback_data='list_products')]])
            )
            return ADMIN_MENU
        
        old_category = product.category
        product.category = new_category
        session.commit()
        
        await update.message.reply_text(
            f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t danh m·ª•c s·∫£n ph·∫©m *{product.name}*:\n\n"
            f"Danh m·ª•c c≈©: *{old_category}*\n"
            f"Danh m·ª•c m·ªõi: *{new_category}*",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô Quay l·∫°i s·∫£n ph·∫©m", callback_data=f'edit_product_{product_id}')]])
        )
        return EDIT_PRODUCT
    except Exception as e:
        session.rollback()
        await update.message.reply_text(
            f"C√≥ l·ªói x·∫£y ra: {str(e)}",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîÑ Th·ª≠ l·∫°i", callback_data=f'edit_category_{product_id}')]])
        )
        return EDIT_PRODUCT_CATEGORY
    finally:
        session.close()

async def set_product_category(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """ƒê·∫∑t danh m·ª•c t·ª´ danh s√°ch c√≥ s·∫µn"""
    query = update.callback_query
    await query.answer()
    
    parts = query.data.split('_')
    product_id = int(parts[2])
    new_category = parts[3]
    
    session = get_session()
    try:
        product = session.query(Product).get(product_id)
        if not product:
            await query.edit_message_text(
                "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m!",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i danh s√°ch", callback_data='list_products')]])
            )
            return ADMIN_MENU
        
        old_category = product.category
        product.category = new_category
        session.commit()
        
        await query.edit_message_text(
            f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t danh m·ª•c s·∫£n ph·∫©m *{product.name}*:\n\n"
            f"Danh m·ª•c c≈©: *{old_category}*\n"
            f"Danh m·ª•c m·ªõi: *{new_category}*",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô Quay l·∫°i s·∫£n ph·∫©m", callback_data=f'edit_product_{product_id}')]])
        )
        return EDIT_PRODUCT
    except Exception as e:
        session.rollback()
        await query.edit_message_text(
            f"C√≥ l·ªói x·∫£y ra: {str(e)}",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîÑ Th·ª≠ l·∫°i", callback_data=f'edit_category_{product_id}')]])
        )
        return EDIT_PRODUCT
    finally:
        session.close()

async def save_product_description(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """L∆∞u m√¥ t·∫£ m·ªõi cho s·∫£n ph·∫©m"""
    new_description = update.message.text
    product_id = context.user_data.get('editing_product_id')
    
    if not product_id:
        await update.message.reply_text(
            "Kh√¥ng t√¨m th·∫•y th√¥ng tin s·∫£n ph·∫©m c·∫ßn ch·ªânh s·ª≠a!",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i danh s√°ch", callback_data='list_products')]])
        )
        return ADMIN_MENU
    
    session = get_session()
    try:
        product = session.query(Product).get(product_id)
        if not product:
            await update.message.reply_text(
                "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m!",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i danh s√°ch", callback_data='list_products')]])
            )
            return ADMIN_MENU
        
        old_description = product.description or "Kh√¥ng c√≥"
        product.description = new_description
        session.commit()
        
        await update.message.reply_text(
            f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t m√¥ t·∫£ s·∫£n ph·∫©m *{product.name}*:\n\n"
            f"M√¥ t·∫£ c≈©: *{old_description}*\n"
            f"M√¥ t·∫£ m·ªõi: *{new_description}*",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô Quay l·∫°i s·∫£n ph·∫©m", callback_data=f'edit_product_{product_id}')]])
        )
        return EDIT_PRODUCT
    except Exception as e:
        session.rollback()
        await update.message.reply_text(
            f"C√≥ l·ªói x·∫£y ra: {str(e)}",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîÑ Th·ª≠ l·∫°i", callback_data=f'edit_description_{product_id}')]])
        )
        return EDIT_PRODUCT_DESCRIPTION
    finally:
        session.close()

async def show_category_products(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Hi·ªÉn th·ªã c√°c s·∫£n ph·∫©m trong danh m·ª•c ƒë·ªÉ ƒë·∫∑t m√≥n"""
    query = update.callback_query
    await query.answer()
    
    # L·∫•y t√™n danh m·ª•c t·ª´ callback data
    category = query.data.replace("order_cat_", "")
    
    session = get_session()
    try:
        # L·∫•y s·∫£n ph·∫©m theo danh m·ª•c
        products = session.query(Product).filter(
            Product.category == category,
            Product.is_available == True
        ).all()
        
        if not products:
            await query.edit_message_text(
                text=f"Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o trong danh m·ª•c {category}",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='place_order')]])
            )
            return ORDER_ITEMS
        
        # Hi·ªÉn th·ªã s·∫£n ph·∫©m v√† cho ph√©p th√™m v√†o gi·ªè h√†ng
        text = f"*Danh m·ª•c: {category}*\n\n"
        keyboard = []
        
        for product in products:
            text += f"*{product.name}* - _{product.price:,.0f} VNƒê_\n{product.description or 'Kh√¥ng c√≥ m√¥ t·∫£'}\n\n"
            keyboard.append([InlineKeyboardButton(f"‚ûï Th√™m {product.name}", callback_data=f"add_item_{product.id}")])
        
        keyboard.append([InlineKeyboardButton("üõí Xem gi·ªè h√†ng", callback_data='view_cart')])
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='place_order')])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            text=text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
        return ORDER_ITEMS
    finally:
        session.close()

async def add_to_cart(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng"""
    query = update.callback_query
    await query.answer()
    
    # L·∫•y ID s·∫£n ph·∫©m t·ª´ callback data
    product_id = int(query.data.split('_')[2])
    
    # Kh·ªüi t·∫°o gi·ªè h√†ng n·∫øu ch∆∞a c√≥
    if 'cart' not in context.user_data:
        context.user_data['cart'] = []
    
    session = get_session()
    try:
        # L·∫•y th√¥ng tin s·∫£n ph·∫©m
        product = session.query(Product).get(product_id)
        if not product:
            await query.edit_message_text(
                text="‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m!",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='place_order')]])
            )
            return ORDER_ITEMS
        
        # Ki·ªÉm tra xem s·∫£n ph·∫©m ƒë√£ c√≥ trong gi·ªè h√†ng ch∆∞a
        for item in context.user_data['cart']:
            if item['product_id'] == product_id:
                # TƒÉng s·ªë l∆∞·ª£ng n·∫øu ƒë√£ c√≥
                item['quantity'] += 1
                
                await query.answer(f"ƒê√£ th√™m 1 {product.name} v√†o gi·ªè h√†ng!")
                # Chuy·ªÉn v·ªÅ trang danh m·ª•c s·∫£n ph·∫©m
                return await show_category_products(update, context)
        
        # Th√™m s·∫£n ph·∫©m m·ªõi v√†o gi·ªè h√†ng
        context.user_data['cart'].append({
            'product_id': product_id,
            'product_name': product.name,
            'price': product.price,
            'quantity': 1
        })
        
        await query.answer(f"ƒê√£ th√™m {product.name} v√†o gi·ªè h√†ng!")
        # Chuy·ªÉn v·ªÅ trang danh m·ª•c s·∫£n ph·∫©m
        return await show_category_products(update, context)
    finally:
        session.close()

async def view_cart(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Xem gi·ªè h√†ng"""
    query = update.callback_query
    await query.answer()
    
    # Ki·ªÉm tra xem gi·ªè h√†ng c√≥ d·ªØ li·ªáu kh√¥ng
    cart = context.user_data.get('cart', [])
    if not cart:
        await query.edit_message_text(
            text="üõí *Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng!*\n\nH√£y th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng tr∆∞·ªõc khi thanh to√°n.",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üçΩÔ∏è ƒê·∫∑t m√≥n", callback_data='place_order')]])
        )
        return ORDER_ITEMS
    
    # Hi·ªÉn th·ªã th√¥ng tin gi·ªè h√†ng
    text = "üõí *Gi·ªè h√†ng c·ªßa b·∫°n:*\n\n"
    total = 0
    
    for i, item in enumerate(cart):
        item_total = item['price'] * item['quantity']
        total += item_total
        text += f"{i + 1}. *{item['product_name']}*\n"
        text += f"   S·ªë l∆∞·ª£ng: {item['quantity']} x {item['price']:,.0f} VNƒê = {item_total:,.0f} VNƒê\n\n"
    
    text += f"*T·ªïng c·ªông: {total:,.0f} VNƒê*"
    
    # Th√¥ng tin b√†n ƒë√£ ƒë·∫∑t (n·∫øu c√≥)
    selected_table = context.user_data.get('selected_table')
    if selected_table:
        text += f"\n\nü™ë *B√†n ƒë√£ ch·ªçn:* B√†n {selected_table['number']}"
    
    # T·∫°o c√°c n√∫t ƒëi·ªÅu khi·ªÉn
    keyboard = [
        [InlineKeyboardButton("‚úÖ X√°c nh·∫≠n ƒë·∫∑t m√≥n", callback_data='confirm_order')],
        [InlineKeyboardButton("üóëÔ∏è X√≥a gi·ªè h√†ng", callback_data='clear_cart')],
        [InlineKeyboardButton("‚ûï Th√™m m√≥n kh√°c", callback_data='place_order')]
    ]
    
    # N·∫øu ch∆∞a ƒë·∫∑t b√†n, hi·ªÉn th·ªã n√∫t ƒë·∫∑t b√†n
    if not selected_table:
        keyboard.insert(1, [InlineKeyboardButton("ü™ë ƒê·∫∑t b√†n", callback_data='reserve_table')])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    return CONFIRM_ORDER

async def clear_cart(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """X√≥a gi·ªè h√†ng"""
    query = update.callback_query
    await query.answer()
    
    # X√≥a gi·ªè h√†ng
    context.user_data['cart'] = []
    
    await query.edit_message_text(
        text="‚úÖ *ƒê√£ x√≥a gi·ªè h√†ng!*\n\nGi·ªè h√†ng c·ªßa b·∫°n hi·ªán ƒëang tr·ªëng.",
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üçΩÔ∏è ƒê·∫∑t m√≥n", callback_data='place_order')],
            [InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i menu ch√≠nh", callback_data='back_to_main')]
        ])
    )
    
    return ORDER_ITEMS

async def confirm_order(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """X√°c nh·∫≠n ƒë·∫∑t m√≥n"""
    query = update.callback_query
    await query.answer()
    
    # Ki·ªÉm tra xem gi·ªè h√†ng c√≥ d·ªØ li·ªáu kh√¥ng
    cart = context.user_data.get('cart', [])
    if not cart:
        await query.edit_message_text(
            text="‚ùå *Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng!*\n\nH√£y th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng tr∆∞·ªõc khi thanh to√°n.",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üçΩÔ∏è ƒê·∫∑t m√≥n", callback_data='place_order')]])
        )
        return ORDER_ITEMS
    
    # L·∫•y th√¥ng tin ng∆∞·ªùi d√πng
    user = update.effective_user
    user_id = user.id
    username = user.username or f"{user.first_name} {user.last_name or ''}"
    
    # L·∫•y th√¥ng tin b√†n (n·∫øu c√≥)
    selected_table = context.user_data.get('selected_table')
    table_number = selected_table['number'] if selected_table else None
    
    # T√≠nh t·ªïng ti·ªÅn
    total_amount = sum(item['price'] * item['quantity'] for item in cart)
    
    session = get_session()
    try:
        # T·∫°o ƒë∆°n h√†ng m·ªõi
        new_order = Order(
            user_id=user_id,
            username=username,
            status='pending',
            table_number=table_number,
            total_amount=total_amount
        )
        
        session.add(new_order)
        session.flush()  # ƒê·ªÉ l·∫•y ID c·ªßa ƒë∆°n h√†ng m·ªõi
        
        # Th√™m c√°c s·∫£n ph·∫©m v√†o ƒë∆°n h√†ng
        for item in cart:
            order_item = OrderItem(
                order_id=new_order.id,
                product_id=item['product_id'],
                quantity=item['quantity'],
                price=item['price']
            )
            session.add(order_item)
        
        session.commit()
        
        # X√≥a gi·ªè h√†ng sau khi ƒë·∫∑t h√†ng th√†nh c√¥ng
        context.user_data['cart'] = []
        
        # Th√¥ng b√°o th√†nh c√¥ng
        text = "‚úÖ *ƒê·∫∑t m√≥n th√†nh c√¥ng!*\n\n"
        text += f"M√£ ƒë∆°n h√†ng: *#{new_order.id}*\n"
        
        if table_number:
            text += f"B√†n: *B√†n {table_number}*\n"
        
        text += f"T·ªïng ti·ªÅn: *{total_amount:,.0f} VNƒê*\n\n"
        text += "ƒê∆°n h√†ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒëi v√† ƒëang ch·ªù x√°c nh·∫≠n.\n"
        text += "Vui l√≤ng ƒë·ª£i nh√¢n vi√™n ph·ª•c v·ª• m√≥n ƒÉn c·ªßa b·∫°n.\n\n"
        text += "C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª• c·ªßa ch√∫ng t√¥i! üôè"
        
        await query.edit_message_text(
            text=text,
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üçΩÔ∏è ƒê·∫∑t th√™m m√≥n", callback_data='place_order')],
                [InlineKeyboardButton("üìã Xem menu", callback_data='view_menu')],
                [InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i menu ch√≠nh", callback_data='back_to_main')]
            ])
        )
        
        return MAIN_MENU
    except Exception as e:
        session.rollback()
        await query.edit_message_text(
            text=f"‚ùå *C√≥ l·ªói x·∫£y ra khi ƒë·∫∑t m√≥n:*\n\n{str(e)}\n\nVui l√≤ng th·ª≠ l·∫°i sau.",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîÑ Th·ª≠ l·∫°i", callback_data='confirm_order')],
                [InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='view_cart')]
            ])
        )
        return CONFIRM_ORDER
    finally:
        session.close() 