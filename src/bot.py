import os
import logging
import asyncio
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application, CommandHandler, MessageHandler, 
    ConversationHandler, CallbackQueryHandler, ContextTypes,
    filters
)
from dotenv import load_dotenv
from database import init_db, get_session, Product, Order, OrderItem, Table
from sqlalchemy import func
from sqlalchemy import create_engine, Column, Integer, String, Float, Boolean, ForeignKey, DateTime, func
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, relationship
import datetime
import logging
import asyncio
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application, CommandHandler, MessageHandler, 
    filters, ConversationHandler, CallbackQueryHandler, ContextTypes
)
from config import BOT_TOKEN, GROUP_CHAT_ID

# C·∫•u h√¨nh logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# Import c·∫•u h√¨nh t·ª´ config.py
from config import BOT_TOKEN, GROUP_CHAT_ID

# Ki·ªÉm tra GROUP_CHAT_ID
if not GROUP_CHAT_ID:
    logger.warning("GROUP_CHAT_ID ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh. Nhi·ªÅu ch·ª©c nƒÉng s·∫Ω kh√¥ng ho·∫°t ƒë·ªông ƒë√∫ng!")
else:
    logger.info(f"GROUP_CHAT_ID ƒë∆∞·ª£c c·∫•u h√¨nh l√†: {GROUP_CHAT_ID}")

# Load bi·∫øn m√¥i tr∆∞·ªùng
load_dotenv()
TOKEN = os.getenv('TELEGRAM_TOKEN')
if not TOKEN:
    # Fallback to direct token if not in environment variables
    TOKEN = '8111919258:AAGMe6AV3qOoqq3SVpMvpIR_9v7ja5MWApQ'

# ƒê·ªçc c√°c ID theo vai tr√≤ t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
ADMIN_ID = int(os.getenv('ADMIN_ID', 6079753756))

# Danh s√°ch ID c·ªßa thu ng√¢n
CASHIER_IDS = os.getenv('CASHIER_IDS', '7686763864')
CASHIER_LIST = [int(id.strip()) for id in CASHIER_IDS.split(',') if id.strip().isdigit()]

# Danh s√°ch ID c·ªßa nh√¢n vi√™n ph·ª•c v·ª•
SERVER_IDS = os.getenv('SERVER_IDS', '')
SERVER_LIST = [int(id.strip()) for id in SERVER_IDS.split(',') if id.strip().isdigit()]

# Tr·∫°ng th√°i h·ªôi tho·∫°i
(MAIN_MENU, ADMIN_MENU, CASHIER_MENU, SERVER_MENU, VIEW_MENU, ORDER_ITEMS, CONFIRM_ORDER, 
 ADD_PRODUCT, EDIT_PRODUCT, VIEW_ORDERS, MANAGE_TABLES,
 EDIT_PRODUCT_NAME, EDIT_PRODUCT_PRICE, EDIT_PRODUCT_CATEGORY, EDIT_PRODUCT_DESCRIPTION, EDIT_PRODUCT_AVAILABILITY,
 ORDER_PREPARATION, BILL_ACTIONS, SELECTING_BILL_TABLE) = range(19)

# Kh·ªüi t·∫°o database
init_db()

def initialize_tables():
    """Kh·ªüi t·∫°o 5 b√†n m·∫∑c ƒë·ªãnh n·∫øu ch∆∞a c√≥ b√†n n√†o trong c∆° s·ªü d·ªØ li·ªáu"""
    session = get_session()
    try:
        # Ki·ªÉm tra xem ƒë√£ c√≥ b√†n n√†o ch∆∞a
        table_count = session.query(Table).count()
        
        if table_count == 0:
            # T·∫°o 5 b√†n m·∫∑c ƒë·ªãnh
            default_tables = [
                Table(number=1, capacity=2, is_reserved=False),
                Table(number=2, capacity=4, is_reserved=False),
                Table(number=3, capacity=4, is_reserved=False),
                Table(number=4, capacity=6, is_reserved=False),
                Table(number=5, capacity=8, is_reserved=False)
            ]
            
            for table in default_tables:
                session.add(table)
                
            session.commit()
            logger.info("ƒê√£ kh·ªüi t·∫°o 5 b√†n m·∫∑c ƒë·ªãnh")
    except Exception as e:
        session.rollback()
        logger.error(f"L·ªói khi kh·ªüi t·∫°o b√†n m·∫∑c ƒë·ªãnh: {str(e)}")
    finally:
        session.close()

# Kh·ªüi t·∫°o b√†n m·∫∑c ƒë·ªãnh
initialize_tables()

def is_admin(user_id):
    """Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ph·∫£i l√† admin hay kh√¥ng"""
    return user_id == ADMIN_ID

def is_cashier(user_id):
    """Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ph·∫£i l√† thu ng√¢n hay kh√¥ng"""
    return user_id in CASHIER_LIST

def is_server(user_id):
    """Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ph·∫£i l√† nh√¢n vi√™n ph·ª•c v·ª• hay kh√¥ng"""
    return user_id in SERVER_LIST

def is_employee(user_id):
    """Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ph·∫£i l√† nh√¢n vi√™n c·ªßa qu√°n hay kh√¥ng"""
    return is_admin(user_id) or is_cashier(user_id) or is_server(user_id)

def get_role(user_id):
    """L·∫•y vai tr√≤ c·ªßa ng∆∞·ªùi d√πng"""
    if is_admin(user_id):
        return "admin"
    elif is_cashier(user_id):
        return "cashier"
    elif is_server(user_id):
        return "server"
    else:
        return "unauthorized"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """X·ª≠ l√Ω l·ªánh /start v√† hi·ªÉn th·ªã menu ch√≠nh"""
    user_id = update.effective_user.id
    
    # L·∫•y th√¥ng tin t√™n ng∆∞·ªùi d√πng
    user = update.effective_user
    user_name = user.first_name
    
    # Ghi l·∫°i user_id v√†o log ƒë·ªÉ ki·ªÉm tra
    logger.info(f"User {user_id} ƒë√£ g·ª≠i l·ªánh /start")
    
    # Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ph·∫£i l√† nh√¢n vi√™n kh√¥ng
    if is_admin(user_id):
        logger.info(f"User {user_id} ƒë√£ ƒëƒÉng nh·∫≠p v·ªõi vai tr√≤ Admin")
        keyboard = [
            [InlineKeyboardButton("üë• Qu·∫£n l√Ω nh√¢n vi√™n", callback_data='manage_employees')],
            [InlineKeyboardButton("üçΩÔ∏è Qu·∫£n l√Ω b√†n", callback_data='manage_tables')],
            [InlineKeyboardButton("üçî Qu·∫£n l√Ω m√≥n ƒÉn", callback_data='manage_products')],
            [InlineKeyboardButton("üìä Th·ªëng k√™", callback_data='statistics')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            text=f"Ch√†o m·ª´ng Admin {user_name}! Vui l√≤ng ch·ªçn m·ªôt trong c√°c t√πy ch·ªçn sau:",
            reply_markup=reply_markup
        )
        return ADMIN_MENU
    elif is_cashier(user_id):
        logger.info(f"User {user_id} ƒë√£ ƒëƒÉng nh·∫≠p v·ªõi vai tr√≤ Thu ng√¢n")
        keyboard = [
            [InlineKeyboardButton("ü™ë Qu·∫£n l√Ω b√†n", callback_data='manage_tables')],
            [InlineKeyboardButton("üíµ Xem c√°c bill c·∫ßn thanh to√°n", callback_data='view_bills')],
            [InlineKeyboardButton("üìä Th·ªëng k√™", callback_data='statistics')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            text=f"Ch√†o m·ª´ng Thu ng√¢n {user_name}! Vui l√≤ng ch·ªçn m·ªôt trong c√°c t√πy ch·ªçn sau:",
            reply_markup=reply_markup
        )
        return CASHIER_MENU
    elif is_server(user_id):
        logger.info(f"User {user_id} ƒë√£ ƒëƒÉng nh·∫≠p v·ªõi vai tr√≤ Ph·ª•c v·ª•")
        keyboard = [
            [InlineKeyboardButton("ü™ë ƒê·∫∑t b√†n", callback_data='reserve_table')],
            [InlineKeyboardButton("üçî ƒê·∫∑t m√≥n", callback_data='place_order')],
            [InlineKeyboardButton("üßæ Y√™u c·∫ßu xu·∫•t bill", callback_data='request_bill')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            text=f"Ch√†o m·ª´ng Nh√¢n vi√™n ph·ª•c v·ª• {user_name}! Vui l√≤ng ch·ªçn m·ªôt trong c√°c t√πy ch·ªçn sau:",
            reply_markup=reply_markup
        )
        return SERVER_MENU
    else:
        logger.warning(f"User {user_id} kh√¥ng ph·∫£i l√† nh√¢n vi√™n, t·ª´ ch·ªëi truy c·∫≠p")
        await update.message.reply_text(
            f"‚õî Xin ch√†o {user_name}, b·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p h·ªá th·ªëng.\n"
            "Vui l√≤ng li√™n h·ªá Admin n·∫øu b·∫°n cho r·∫±ng ƒë√¢y l√† l·ªói."
        )
        return ConversationHandler.END

def get_appropriate_menu_state(user_id):
    """Tr·∫£ v·ªÅ tr·∫°ng th√°i menu ph√π h·ª£p d·ª±a tr√™n vai tr√≤ c·ªßa ng∆∞·ªùi d√πng"""
    if is_admin(user_id):
        return ADMIN_MENU
    elif is_cashier(user_id):
        return CASHIER_MENU
    elif is_server(user_id):
        return SERVER_MENU
    return ConversationHandler.END

async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """X·ª≠ l√Ω l·ª±a ch·ªçn menu d·ª±a tr√™n vai tr√≤ c·ªßa ng∆∞·ªùi d√πng."""
    query = update.callback_query
    user_id = update.effective_user.id
    choice = query.data
    
    # Log l·ª±a ch·ªçn c·ªßa ng∆∞·ªùi d√πng
    role = "admin" if is_admin(user_id) else "cashier" if is_cashier(user_id) else "server" if is_server(user_id) else "unknown"
    logger.info(f"Ng∆∞·ªùi d√πng {user_id} (vai tr√≤: {role}) ƒë√£ ch·ªçn: {choice}")
    
    # X√°c nh·∫≠n callback query ƒë·ªÉ Telegram kh√¥ng hi·ªÉn th·ªã "loading..."
    await query.answer()
    
    # X·ª≠ l√Ω l·ª±a ch·ªçn quay l·∫°i menu ch√≠nh
    if choice == "back_to_main":
        return await start(update, context)
    
    # X·ª≠ l√Ω c√°c common handlers kh√¥ng ph·ª• thu·ªôc vai tr√≤
    common_handlers = {
        "place_order": start_order,            # B·∫Øt ƒë·∫ßu ƒë·∫∑t m√≥n
        "reserve_table": show_tables,          # Hi·ªÉn th·ªã b√†n ƒë·ªÉ ƒë·∫∑t
        "view_cart": view_cart,                # Xem gi·ªè h√†ng
        "view_menu": show_menu_categories,     # Xem menu
        "confirm_order": confirm_order,        # X√°c nh·∫≠n ƒë·∫∑t m√≥n
        "clear_cart": clear_cart,              # X√≥a gi·ªè h√†ng
        "request_bill": request_bill           # Y√™u c·∫ßu xu·∫•t bill
    }
    
    # N·∫øu l·ª±a ch·ªçn thu·ªôc common handlers, x·ª≠ l√Ω ngay
    if choice in common_handlers:
        return await common_handlers[choice](update, context)
    
    # X·ª≠ l√Ω c√°c l·ª±a ch·ªçn c·ªßa Admin
    if is_admin(user_id):
        admin_menu_handlers = {
            "manage_products": admin_manage_products,
            "manage_tables": admin_manage_tables,
            "view_reports": admin_reports,
            "view_bills": view_bills,          # Admin c≈©ng c√≥ th·ªÉ xem v√† x·ª≠ l√Ω bill
            "reset_all_tables": reset_all_tables
        }
        handler = admin_menu_handlers.get(choice)
        if handler:
            return await handler(update, context)
    
    # X·ª≠ l√Ω c√°c l·ª±a ch·ªçn c·ªßa Thu ng√¢n
    elif is_cashier(user_id):
        cashier_menu_handlers = {
            "manage_tables": admin_manage_tables,
            "view_orders": view_orders,
            "view_bills": view_bills,         # Thu ng√¢n c√≥ th·ªÉ xem v√† x·ª≠ l√Ω bill
        }
        handler = cashier_menu_handlers.get(choice)
        if handler:
            return await handler(update, context)
    
    # X·ª≠ l√Ω c√°c l·ª±a ch·ªçn c·ªßa Ph·ª•c v·ª•
    elif is_server(user_id):
        # C√°c handler ƒë·∫∑c bi·ªát c·ªßa nh√¢n vi√™n ph·ª•c v·ª• ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω trong common handlers
        pass
    
    # X·ª≠ l√Ω c√°c pattern ƒë·∫∑c bi·ªát cho callback data
    if choice.startswith("order_cat_"):
        return await show_category_products(update, context)
    elif choice.startswith("category_"):
        return await show_category_items(update, context)
    elif choice.startswith("add_item_"):
        return await add_to_cart(update, context)
    elif choice.startswith("reserve_"):
        return await reserve_table(update, context)
    elif choice.startswith("unreserve_"):
        return await unreserve_table(update, context)
    elif choice.startswith("bill_for_table"):
        return await show_table_bill(update, context)
    elif choice.startswith("send_bill_to_group"):
        return await send_bill_to_group(update, context)
    elif choice.startswith("process_payment"):
        return await process_payment(update, context)
    elif choice.startswith("edit_product_"):
        return await edit_product(update, context)
    elif choice.startswith("confirm_reset_tables"):
        return await confirm_reset_tables(update, context)
    
    # N·∫øu kh√¥ng tr√πng kh·ªõp v·ªõi b·∫•t k·ª≥ x·ª≠ l√Ω n√†o, tr·∫£ v·ªÅ menu ph√π h·ª£p
    await query.edit_message_text(
        text=f"L·ª±a ch·ªçn '{choice}' kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£. Vui l√≤ng ch·ªçn t·ª´ menu.",
        reply_markup=get_menu_keyboard(user_id)
    )
    return get_appropriate_menu_state(user_id)

def get_menu_keyboard(user_id: int) -> InlineKeyboardMarkup:
    """T·∫°o b√†n ph√≠m menu d·ª±a tr√™n vai tr√≤ c·ªßa ng∆∞·ªùi d√πng."""
    if is_admin(user_id):
        keyboard = [
            [InlineKeyboardButton("üìã Qu·∫£n l√Ω s·∫£n ph·∫©m", callback_data="manage_products")],
            [InlineKeyboardButton("ü™ë Qu·∫£n l√Ω b√†n", callback_data="manage_tables")],
            [InlineKeyboardButton("üë• Qu·∫£n l√Ω ng∆∞·ªùi d√πng", callback_data="manage_users")],
            [InlineKeyboardButton("üìä Xem b√°o c√°o", callback_data="view_reports")],
            [InlineKeyboardButton("üçΩÔ∏è Qu·∫£n l√Ω ƒë∆°n h√†ng", callback_data="manage_orders")],
            [InlineKeyboardButton("üí∞ Qu·∫£n l√Ω thanh to√°n", callback_data="view_bills")]
        ]
    elif is_cashier(user_id):
        keyboard = [
            [InlineKeyboardButton("ü™ë Qu·∫£n l√Ω b√†n", callback_data="manage_tables")],
            [InlineKeyboardButton("üçΩÔ∏è Xem ƒë∆°n h√†ng", callback_data="view_orders")],
            [InlineKeyboardButton("üí∞ X·ª≠ l√Ω thanh to√°n", callback_data="view_bills")]
        ]
    elif is_server(user_id):
        keyboard = [
            [InlineKeyboardButton("üìù ƒê·∫∑t b√†n", callback_data="place_reservation")],
            [InlineKeyboardButton("üç≤ ƒê·∫∑t m√≥n", callback_data="place_order")],
            [InlineKeyboardButton("üßæ Y√™u c·∫ßu xu·∫•t bill", callback_data="request_bill")]
        ]
    else:
        # Menu m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng c√≥ vai tr√≤
        keyboard = [
            [InlineKeyboardButton("üîí ƒêƒÉng nh·∫≠p", callback_data="login")]
        ]
    
    return InlineKeyboardMarkup(keyboard)

async def show_menu_categories(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Hi·ªÉn th·ªã danh m·ª•c s·∫£n ph·∫©m"""
    query = update.callback_query
    session = get_session()
    
    try:
        # L·∫•y c√°c danh m·ª•c s·∫£n ph·∫©m
        categories = session.query(Product.category).distinct().all()
        categories = [category[0] for category in categories]
        
        keyboard = []
        for category in categories:
            keyboard.append([InlineKeyboardButton(f"{category}", callback_data=f"category_{category}")])
        
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='back_to_main')])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if query:
            await query.edit_message_text(text="Ch·ªçn danh m·ª•c:", reply_markup=reply_markup)
        else:
            await update.message.reply_text(text="Ch·ªçn danh m·ª•c:", reply_markup=reply_markup)
    finally:
        session.close()
    
    return VIEW_MENU

async def show_category_items(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Hi·ªÉn th·ªã c√°c s·∫£n ph·∫©m trong danh m·ª•c"""
    query = update.callback_query
    await query.answer()
    
    # L·∫•y t√™n danh m·ª•c t·ª´ callback data
    category = query.data.replace("category_", "")
    
    session = get_session()
    try:
        # L·∫•y s·∫£n ph·∫©m theo danh m·ª•c
        products = session.query(Product).filter(
            Product.category == category,
            Product.is_available == True
        ).all()
        
        if not products:
            await query.edit_message_text(
                text=f"Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o trong danh m·ª•c {category}",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='view_menu')]])
            )
            return VIEW_MENU
        
        text = f"*Danh m·ª•c: {category}*\n\n"
        for product in products:
            text += f"*{product.name}* - _{product.price:,.0f} VNƒê_\n{product.description or 'Kh√¥ng c√≥ m√¥ t·∫£'}\n\n"
        
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='view_menu')]]
        if is_admin(update.effective_user.id):
            keyboard.append([InlineKeyboardButton("‚úèÔ∏è Ch·ªânh s·ª≠a danh m·ª•c", callback_data=f'edit_category_{category}')])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text=text, reply_markup=reply_markup, parse_mode='Markdown')
    finally:
        session.close()
    
    return VIEW_MENU

async def start_order(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """B·∫Øt ƒë·∫ßu quy tr√¨nh ƒë·∫∑t h√†ng"""
    query = update.callback_query
    await query.answer()
    
    # Kh·ªüi t·∫°o gi·ªè h√†ng tr·ªëng n·∫øu ch∆∞a c√≥
    if 'cart' not in context.user_data:
        context.user_data['cart'] = []
    
    # Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ ƒë·∫∑t b√†n ch∆∞a
    selected_table = context.user_data.get('selected_table')
    if selected_table:
        table_info = f"ü™ë *ƒêANG ƒê·∫∂T M√ìN CHO B√ÄN {selected_table['number']}*\n\n"
    else:
        table_info = "‚ö†Ô∏è *CH∆ØA CH·ªåN B√ÄN* - B·∫°n n√™n ƒë·∫∑t b√†n tr∆∞·ªõc khi ƒë·∫∑t m√≥n!\n\n"
    
    session = get_session()
    try:
        # L·∫•y danh m·ª•c s·∫£n ph·∫©m ƒë·ªÉ hi·ªÉn th·ªã
        categories = session.query(Product.category).distinct().all()
        categories = [category[0] for category in categories]
        
        keyboard = []
        for category in categories:
            keyboard.append([InlineKeyboardButton(f"{category}", callback_data=f"order_cat_{category}")])
        
        # N·∫øu ch∆∞a ƒë·∫∑t b√†n, hi·ªÉn th·ªã n√∫t ƒë·∫∑t b√†n n·ªïi b·∫≠t
        if not selected_table:
            keyboard.insert(0, [InlineKeyboardButton("‚ö†Ô∏è ƒê·∫∂T B√ÄN TR∆Ø·ªöC ‚ö†Ô∏è", callback_data='reserve_table')])
            
        # N·∫øu c√≥ s·∫£n ph·∫©m trong gi·ªè h√†ng, hi·ªÉn th·ªã n√∫t xem gi·ªè h√†ng
        if context.user_data.get('cart'):
            cart_count = sum(item['quantity'] for item in context.user_data['cart'])
            keyboard.append([InlineKeyboardButton(f"üõí Xem gi·ªè h√†ng ({cart_count} m√≥n)", callback_data='view_cart')])
        else:
            keyboard.append([InlineKeyboardButton("üõí Gi·ªè h√†ng tr·ªëng", callback_data='view_cart')])
            
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='back_to_main')])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text=f"{table_info}Ch·ªçn danh m·ª•c ƒë·ªÉ ƒë·∫∑t m√≥n:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    finally:
        session.close()
    
    return ORDER_ITEMS

async def admin_manage_products(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Giao di·ªán qu·∫£n l√Ω s·∫£n ph·∫©m cho admin"""
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("‚ûï Th√™m s·∫£n ph·∫©m m·ªõi", callback_data='add_product')],
        [InlineKeyboardButton("üìã Xem & S·ª≠a s·∫£n ph·∫©m", callback_data='list_products')],
        [InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='back_to_main')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text="*Qu·∫£n l√Ω S·∫£n ph·∫©m*\nCh·ªçn m·ªôt t√πy ch·ªçn:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    return ADMIN_MENU

async def admin_manage_orders(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Giao di·ªán qu·∫£n l√Ω ƒë∆°n h√†ng cho admin"""
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("üìã ƒê∆°n h√†ng ƒëang ch·ªù", callback_data='pending_orders')],
        [InlineKeyboardButton("‚úÖ ƒê∆°n h√†ng ƒë√£ x√°c nh·∫≠n", callback_data='confirmed_orders')],
        [InlineKeyboardButton("üíØ ƒê∆°n h√†ng ƒë√£ ho√†n th√†nh", callback_data='completed_orders')],
        [InlineKeyboardButton("‚ùå ƒê∆°n h√†ng ƒë√£ h·ªßy", callback_data='cancelled_orders')],
        [InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='back_to_main')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text="*Qu·∫£n l√Ω ƒê∆°n h√†ng*\nCh·ªçn danh s√°ch ƒë∆°n h√†ng:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    return ADMIN_MENU

async def admin_manage_tables(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Hi·ªÉn th·ªã menu qu·∫£n l√Ω b√†n"""
    query = update.callback_query
    await query.answer()
    
    # Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng l√† admin ho·∫∑c thu ng√¢n
    user_id = update.effective_user.id
    if not (is_admin(user_id) or is_cashier(user_id)):
        await query.edit_message_text(
            text="‚õî B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p v√†o khu v·ª±c n√†y.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='back_to_main')]])
        )
        return MAIN_MENU
    
    # Hi·ªÉn th·ªã menu qu·∫£n l√Ω b√†n
    keyboard = []
    
    # Ch·ªâ admin c√≥ th·ªÉ th√™m/s·ª≠a/x√≥a b√†n
    if is_admin(user_id):
        keyboard.extend([
            [InlineKeyboardButton("‚ûï Th√™m b√†n m·ªõi", callback_data='add_new_table')],
            [InlineKeyboardButton("‚úèÔ∏è Ch·ªânh s·ª≠a th√¥ng tin b√†n", callback_data='edit_table_info')],
            [InlineKeyboardButton("üóëÔ∏è X√≥a b√†n", callback_data='delete_table')],
        ])
    
    # C·∫£ admin v√† thu ng√¢n ƒë·ªÅu c√≥ th·ªÉ qu·∫£n l√Ω tr·∫°ng th√°i b√†n
    keyboard.extend([
        [InlineKeyboardButton("üîÑ Qu·∫£n l√Ω tr·∫°ng th√°i b√†n", callback_data='manage_table_status')],
        [InlineKeyboardButton("üí∞ Thanh to√°n nhanh theo b√†n", callback_data='quick_payment_by_table')],
    ])
    
    # Ch·ªâ admin c√≥ th·ªÉ reset t·∫•t c·∫£ b√†n
    if is_admin(user_id):
        keyboard.append([InlineKeyboardButton("üîÑ Reset t·∫•t c·∫£ b√†n v·ªÅ tr·∫°ng th√°i tr·ªëng", callback_data='reset_all_tables')])
    
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='back_to_main')])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text="*QU·∫¢N L√ù B√ÄN*\nVui l√≤ng ch·ªçn ch·ª©c nƒÉng qu·∫£n l√Ω:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    return MANAGE_TABLES

async def add_new_table(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Hi·ªÉn th·ªã giao di·ªán th√™m b√†n m·ªõi"""
    query = update.callback_query
    await query.answer()
    
    # Ki·ªÉm tra quy·ªÅn admin
    if not is_admin(update.effective_user.id):
        await query.edit_message_text(
            text="‚õî Ch·ªâ Admin m·ªõi c√≥ quy·ªÅn th√™m b√†n m·ªõi.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='manage_tables')]])
        )
        return MANAGE_TABLES
    
    # Hi·ªÉn th·ªã form th√™m b√†n
    keyboard = []
    
    # T·∫°o c√°c n√∫t ch·ªçn s·ªë b√†n
    for table_number in range(1, 11):
        row = []
        for i in range(5):
            num = table_number + i * 10
            row.append(InlineKeyboardButton(f"{num}", callback_data=f"create_table_{num}_4"))
        keyboard.append(row)
    
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='manage_tables')])
    
    await query.edit_message_text(
        text="*TH√äM B√ÄN M·ªöI*\n\nCh·ªçn s·ªë b√†n ƒë·ªÉ th√™m (m·∫∑c ƒë·ªãnh 4 ch·ªó ng·ªìi):",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )
    
    return MANAGE_TABLES

async def create_table(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """X·ª≠ l√Ω t·∫°o b√†n m·ªõi"""
    query = update.callback_query
    await query.answer()
    
    # Ki·ªÉm tra quy·ªÅn admin
    if not is_admin(update.effective_user.id):
        await query.edit_message_text(
            text="‚õî Ch·ªâ Admin m·ªõi c√≥ quy·ªÅn t·∫°o b√†n m·ªõi.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='manage_tables')]])
        )
        return MANAGE_TABLES
    
    # L·∫•y th√¥ng tin t·ª´ callback data
    # Format: create_table_<s·ªë_b√†n>_<s·ªë_ch·ªó>
    parts = query.data.split('_')
    table_number = int(parts[2])
    table_capacity = int(parts[3]) if len(parts) > 3 else 4
    
    conn = get_db_connection()
    try:
        # Ki·ªÉm tra xem s·ªë b√†n ƒë√£ t·ªìn t·∫°i ch∆∞a
        cursor = conn.cursor()
        cursor.execute("SELECT id FROM tables WHERE name = ?", (f"B√†n {table_number}",))
        existing_table = cursor.fetchone()
        
        if existing_table:
            await query.edit_message_text(
                text=f"‚ùå B√†n s·ªë {table_number} ƒë√£ t·ªìn t·∫°i trong h·ªá th·ªëng!\n\nVui l√≤ng ch·ªçn s·ªë b√†n kh√°c.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='add_new_table')]])
            )
            return MANAGE_TABLES
        
        # T·∫°o b√†n m·ªõi
        cursor.execute(
            "INSERT INTO tables (name, capacity, is_reserved) VALUES (?, ?, 0)",
            (f"B√†n {table_number}", table_capacity)
        )
        conn.commit()
        
        # G·ª≠i th√¥ng b√°o ƒë·∫øn nh√≥m
        user = update.effective_user
        user_name = f"{user.first_name} {user.last_name or ''}"
        
        notification_message = (
            f"‚ûï *TH√îNG B√ÅO TH√äM B√ÄN M·ªöI*\n\n"
            f"Admin *{user_name}* v·ª´a th√™m B√†n {table_number} ({table_capacity} ch·ªó ng·ªìi) v√†o h·ªá th·ªëng\n"
            f"üïí Th·ªùi gian: {datetime.now().strftime('%H:%M:%S %d/%m/%Y')}"
        )
        
        # G·ª≠i th√¥ng b√°o kh√¥ng ƒë·ªìng b·ªô ƒë·ªÉ kh√¥ng l√†m ch·∫≠m lu·ªìng ch√≠nh
        asyncio.create_task(send_group_notification(context, notification_message))
        
        # Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
        await query.edit_message_text(
            text=f"‚úÖ *ƒê√£ th√™m b√†n th√†nh c√¥ng!*\n\n"
                f"‚Ä¢ S·ªë b√†n: {table_number}\n"
                f"‚Ä¢ S·ª©c ch·ª©a: {table_capacity} ng∆∞·ªùi",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ûï Th√™m b√†n kh√°c", callback_data='add_new_table')],
                [InlineKeyboardButton("üîô Quay l·∫°i qu·∫£n l√Ω b√†n", callback_data='manage_tables')]
            ]),
            parse_mode='Markdown'
        )
        return MANAGE_TABLES
        
    except Exception as e:
        logger.error(f"L·ªói khi t·∫°o b√†n m·ªõi: {str(e)}")
        await query.edit_message_text(
            text=f"‚ùå ƒê√£ x·∫£y ra l·ªói: {str(e)}",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='manage_tables')]])
        )
        return MANAGE_TABLES
    finally:
        conn.close()

async def admin_reports(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Hi·ªÉn th·ªã b√°o c√°o cho admin"""
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("üìä Doanh thu h√¥m nay", callback_data='report_today')],
        [InlineKeyboardButton("üìà Doanh thu tu·∫ßn n√†y", callback_data='report_week')],
        [InlineKeyboardButton("üìâ Doanh thu th√°ng n√†y", callback_data='report_month')],
        [InlineKeyboardButton("üîù S·∫£n ph·∫©m b√°n ch·∫°y", callback_data='report_top_products')],
        [InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='back_to_main')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text="*B√°o c√°o*\nCh·ªçn lo·∫°i b√°o c√°o:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    return ADMIN_MENU

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """X·ª≠ l√Ω l·ªói"""
    logger.error(f"Update {update} caused error {context.error}")

async def show_tables(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Hi·ªÉn th·ªã danh s√°ch b√†n"""
    query = update.callback_query
    await query.answer()
    
    session = get_session()
    try:
        # L·∫•y t·∫•t c·∫£ b√†n, bao g·ªìm c·∫£ ƒë√£ ƒë·∫∑t v√† ch∆∞a ƒë·∫∑t
        tables = session.query(Table).order_by(Table.number).all()
        
        if not tables:
            # N·∫øu kh√¥ng c√≥ b√†n n√†o, th·ª≠ kh·ªüi t·∫°o l·∫°i
            session.close()
            initialize_tables()
            session = get_session()
            tables = session.query(Table).order_by(Table.number).all()
            
            if not tables:
                await query.edit_message_text(
                    text="‚ùå Kh√¥ng th·ªÉ t√¨m th·∫•y th√¥ng tin b√†n. Vui l√≤ng li√™n h·ªá qu·∫£n l√Ω!",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='back_to_main')]])
                )
                return MAIN_MENU
        
        # T√¨m b√†n tr·ªëng
        available_tables = [table for table in tables if not table.is_reserved]
        
        if not available_tables:
            await query.edit_message_text(
                text="‚ùå *Hi·ªán t·∫°i t·∫•t c·∫£ c√°c b√†n ƒë·ªÅu ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t!*\n\nVui l√≤ng quay l·∫°i sau khi c√≥ b√†n tr·ªëng.",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='back_to_main')]])
            )
        else:
            # Hi·ªÉn th·ªã danh s√°ch t·∫•t c·∫£ c√°c b√†n v·ªõi tr·∫°ng th√°i
            text = "*DANH S√ÅCH B√ÄN*\n\n"
            for table in tables:
                status = "üî¥ ƒê√£ ƒë·∫∑t" if table.is_reserved else "üü¢ Tr·ªëng"
                text += f"*B√†n {table.number}* - {table.capacity} ch·ªó - {status}\n"
            
            text += "\nCh·ªçn b√†n tr·ªëng ƒë·ªÉ ƒë·∫∑t:"
            
            # T·∫°o n√∫t ch·ªâ cho c√°c b√†n tr·ªëng
            keyboard = []
            for table in available_tables:
                keyboard.append([InlineKeyboardButton(
                    f"ü™ë ƒê·∫∑t B√†n {table.number} ({table.capacity} ch·ªó)", 
                    callback_data=f'reserve_{table.id}'
                )])
            
            keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='back_to_main')])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                text=text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
    finally:
        session.close()
    
    return MAIN_MENU

async def reserve_table(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """X·ª≠ l√Ω ƒë·∫∑t b√†n"""
    query = update.callback_query
    await query.answer()
    
    # L·∫•y ID b√†n t·ª´ callback data
    table_id = int(query.data.split('_')[1])
    
    session = get_session()
    try:
        table = session.query(Table).get(table_id)
        if not table:
            await query.edit_message_text(
                text="‚ùå Kh√¥ng t√¨m th·∫•y b√†n n√†y!",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='reserve_table')]])
            )
            return MAIN_MENU
        
        if table.is_reserved:
            await query.edit_message_text(
                text="‚ùå B√†n n√†y ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t! Vui l√≤ng ch·ªçn b√†n kh√°c.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Xem b√†n kh√°c", callback_data='reserve_table')]])
            )
            return MAIN_MENU
        
        # ƒê·∫∑t b√†n
        table.is_reserved = True
        session.commit()
        
        # L∆∞u s·ªë b√†n v√†o user_data ƒë·ªÉ s·ª≠ d·ª•ng khi ƒë·∫∑t m√≥n
        context.user_data['selected_table'] = {
            'id': table.id,
            'number': table.number
        }
        
        # G·ª≠i th√¥ng b√°o ƒë·∫øn nh√≥m
        user = update.effective_user
        user_name = f"{user.first_name} {user.last_name or ''}"
        user_role = get_role(user.id)
        role_text = "Admin" if user_role == "admin" else "Thu ng√¢n" if user_role == "cashier" else "Nh√¢n vi√™n ph·ª•c v·ª•"
        
        notification_message = (
            f"ü™ë *TH√îNG B√ÅO C√ì KH√ÅCH ƒê·∫∂T B√ÄN*\n\n"
            f"B√†n *{table.number}* ({table.capacity} ch·ªó) v·ª´a ƒë∆∞·ª£c ƒë·∫∑t\n"
            f"üë§ Ng∆∞·ªùi ph·ª•c v·ª•: *{user_name}* ({role_text})\n"
            f"üïí Th·ªùi gian: {datetime.now().strftime('%H:%M:%S %d/%m/%Y')}\n\n"
            f"‚è∞ Nh√¢n vi√™n vui l√≤ng chu·∫©n b·ªã b√†n v√† ph·ª•c v·ª• kh√°ch!\n"
            f"üí° Nh·∫•n n√∫t 'ƒê·∫∑t m√≥n' b√™n d∆∞·ªõi ƒë·ªÉ ti·∫øn h√†nh ghi m√≥n cho kh√°ch."
        )
        
        # G·ª≠i th√¥ng b√°o kh√¥ng ƒë·ªìng b·ªô ƒë·ªÉ kh√¥ng l√†m ch·∫≠m lu·ªìng ch√≠nh
        asyncio.create_task(send_group_notification(context, notification_message))
        
        # Hi·ªÉn th·ªã tin nh·∫Øn th√†nh c√¥ng v√† ƒë·ªÅ xu·∫•t ƒë·∫∑t m√≥n
        keyboard = [
            [InlineKeyboardButton("üçΩÔ∏è ƒê·∫∑t m√≥n ngay", callback_data='place_order')],
            [InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i Menu ch√≠nh", callback_data='back_to_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text=f"‚úÖ *ƒê·∫∑t b√†n th√†nh c√¥ng!*\n\n"
                 f"B·∫°n ƒë√£ ƒë·∫∑t *B√†n {table.number}* - {table.capacity} ch·ªó.\n\n"
                 f"B·∫°n c√≥ th·ªÉ ƒë·∫∑t m√≥n ngay b√¢y gi·ªù ho·∫∑c quay l·∫°i menu ch√≠nh.",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
        # ƒêi·ªÅu quan tr·ªçng - Thay ƒë·ªïi tr·∫°ng th√°i ƒë·ªÉ x·ª≠ l√Ω ƒë√∫ng callback ti·∫øp theo
        return SERVER_MENU  # Tr·∫£ v·ªÅ SERVER_MENU thay v√¨ MAIN_MENU
    except Exception as e:
        session.rollback()
        await query.edit_message_text(
            text=f"‚ùå C√≥ l·ªói x·∫£y ra khi ƒë·∫∑t b√†n: {str(e)}",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Th·ª≠ l·∫°i", callback_data='reserve_table')]])
        )
        return SERVER_MENU  # Tr·∫£ v·ªÅ SERVER_MENU ƒë·ªÉ ti·∫øp t·ª•c x·ª≠ l√Ω
    finally:
        session.close()

async def add_product(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """X·ª≠ l√Ω th√™m s·∫£n ph·∫©m m·ªõi d·∫°ng form t·ª´ng b∆∞·ªõc"""
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán ch·ª©c nƒÉng n√†y.")
        return MAIN_MENU

    text = update.message.text
    step = context.user_data.get('add_product_step', 'name')
    
    if step == 'name':
        # L∆∞u t√™n s·∫£n ph·∫©m
        context.user_data['product_name'] = text
        context.user_data['add_product_step'] = 'price'
        
        await update.message.reply_text(
            "*Th√™m s·∫£n ph·∫©m m·ªõi - B∆∞·ªõc 2/4*\n\n"
            f"T√™n s·∫£n ph·∫©m: *{text}*\n\n"
            "Vui l√≤ng nh·∫≠p *gi√° s·∫£n ph·∫©m*:\n"
            "‚Ä¢ Ch·ªâ nh·∫≠p s·ªë, kh√¥ng c·∫ßn nh·∫≠p d·∫•u ph·∫©y hay ƒë∆°n v·ªã ti·ªÅn\n"
            "‚Ä¢ V√≠ d·ª•: 25000 (cho s·∫£n ph·∫©m gi√° 25,000 VNƒê)\n"
            "‚Ä¢ Gi√° ph·∫£i l√† s·ªë d∆∞∆°ng",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è H·ªßy thao t√°c", callback_data='manage_products')]])
        )
        return ADD_PRODUCT
        
    elif step == 'price':
        # Ki·ªÉm tra v√† l∆∞u gi√° s·∫£n ph·∫©m
        try:
            price = int(text)
            if price <= 0:
                raise ValueError("Gi√° ph·∫£i l√† s·ªë d∆∞∆°ng")
            
            context.user_data['product_price'] = price
            context.user_data['add_product_step'] = 'category'
            
            # L·∫•y c√°c danh m·ª•c hi·ªán c√≥ ƒë·ªÉ g·ª£i √Ω
            session = get_session()
            try:
                categories = session.query(Product.category).distinct().all()
                categories = [category[0] for category in categories]
                
                if categories:
                    category_text = "*C√°c danh m·ª•c hi·ªán c√≥:*\n"
                    for category in categories:
                        category_text += f"‚Ä¢ {category}\n"
                    
                    category_text += "\n*L∆∞u √Ω:*\n‚Ä¢ B·∫°n c√≥ th·ªÉ ch·ªçn m·ªôt danh m·ª•c c√≥ s·∫µn ho·∫∑c t·∫°o danh m·ª•c m·ªõi\n‚Ä¢ N√™n vi·∫øt ƒë√∫ng ch√≠nh t·∫£ v√† ƒë·ªãnh d·∫°ng c·ªßa danh m·ª•c"
                else:
                    category_text = "*Ch∆∞a c√≥ danh m·ª•c n√†o ƒë∆∞·ª£c t·∫°o*\nB·∫°n s·∫Ω t·∫°o danh m·ª•c ƒë·∫ßu ti√™n cho h·ªá th·ªëng."
            except Exception:
                category_text = ""
            finally:
                session.close()
            
            await update.message.reply_text(
                "*Th√™m s·∫£n ph·∫©m m·ªõi - B∆∞·ªõc 3/4*\n\n"
                f"T√™n s·∫£n ph·∫©m: *{context.user_data['product_name']}*\n"
                f"Gi√°: *{price:,} VNƒê*\n\n"
                f"Vui l√≤ng nh·∫≠p *danh m·ª•c* cho s·∫£n ph·∫©m:\n\n{category_text}",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è H·ªßy thao t√°c", callback_data='manage_products')]])
            )
            return ADD_PRODUCT
            
        except ValueError:
            await update.message.reply_text(
                "‚ùå *L·ªói: Gi√° s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá!*\n\n"
                "Gi√° s·∫£n ph·∫©m ph·∫£i l√† s·ªë d∆∞∆°ng v√† ch·ªâ ch·ª©a c√°c ch·ªØ s·ªë.\n"
                "V√≠ d·ª•: 25000 (cho s·∫£n ph·∫©m gi√° 25,000 VNƒê)\n\n"
                "Vui l√≤ng nh·∫≠p l·∫°i gi√° s·∫£n ph·∫©m:",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è H·ªßy thao t√°c", callback_data='manage_products')]])
            )
            return ADD_PRODUCT
            
    elif step == 'category':
        # L∆∞u danh m·ª•c s·∫£n ph·∫©m
        context.user_data['product_category'] = text
        context.user_data['add_product_step'] = 'description'
        
        await update.message.reply_text(
            "*Th√™m s·∫£n ph·∫©m m·ªõi - B∆∞·ªõc 4/4*\n\n"
            f"T√™n s·∫£n ph·∫©m: *{context.user_data['product_name']}*\n"
            f"Gi√°: *{context.user_data['product_price']:,} VNƒê*\n"
            f"Danh m·ª•c: *{text}*\n\n"
            "Vui l√≤ng nh·∫≠p *m√¥ t·∫£* cho s·∫£n ph·∫©m:\n"
            "‚Ä¢ M√¥ t·∫£ n√™n ng·∫Øn g·ªçn nh∆∞ng ƒë·∫ßy ƒë·ªß th√¥ng tin\n"
            "‚Ä¢ N·∫øu kh√¥ng c√≥ m√¥ t·∫£, h√£y g·ª≠i d·∫•u '-'\n"
            "‚Ä¢ V√≠ d·ª•: C√† ph√™ pha v·ªõi s·ªØa ƒë·∫∑c, v·ªã ƒë·∫Øng nh·∫π v√† th∆°m b√©o",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è H·ªßy thao t√°c", callback_data='manage_products')]])
        )
        return ADD_PRODUCT
        
    elif step == 'description':
        # L∆∞u m√¥ t·∫£ s·∫£n ph·∫©m v√† th√™m v√†o database
        description = "" if text == "-" else text
        
        session = get_session()
        try:
            # T·∫°o s·∫£n ph·∫©m m·ªõi
            new_product = Product(
                name=context.user_data['product_name'],
                price=context.user_data['product_price'],
                category=context.user_data['product_category'],
                description=description,
                is_available=True
            )
            
            session.add(new_product)
            session.commit()
            
            # X√≥a d·ªØ li·ªáu t·∫°m
            product_name = context.user_data['product_name']
            product_price = context.user_data['product_price']
            product_category = context.user_data['product_category']
            
            context.user_data.pop('product_name', None)
            context.user_data.pop('product_price', None)
            context.user_data.pop('product_category', None)
            context.user_data.pop('add_product_step', None)
            
            # Th√¥ng b√°o th√†nh c√¥ng
            await update.message.reply_text(
                f"‚úÖ *ƒê√£ th√™m s·∫£n ph·∫©m m·ªõi th√†nh c√¥ng!*\n\n"
                f"T√™n: *{product_name}*\n"
                f"Gi√°: *{product_price:,} VNƒê*\n"
                f"Danh m·ª•c: *{product_category}*\n"
                f"M√¥ t·∫£: *{description or 'Kh√¥ng c√≥'}*\n\n"
                f"S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c th√™m v√†o c∆° s·ªü d·ªØ li·ªáu v√† hi·ªÉn th·ªã trong menu.",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚ûï Th√™m s·∫£n ph·∫©m kh√°c", callback_data='add_product')],
                    [InlineKeyboardButton("üìã Xem danh s√°ch s·∫£n ph·∫©m", callback_data='list_products')],
                    [InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i menu qu·∫£n l√Ω", callback_data='manage_products')]
                ])
            )
            return ADMIN_MENU
            
        except Exception as e:
            session.rollback()
            await update.message.reply_text(
                f"‚ùå C√≥ l·ªói x·∫£y ra khi th√™m s·∫£n ph·∫©m: {str(e)}\n\n"
                "Vui l√≤ng th·ª≠ l·∫°i sau.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i menu qu·∫£n l√Ω", callback_data='manage_products')]])
            )
            return ADMIN_MENU
        finally:
            session.close()
    
    # Tr∆∞·ªùng h·ª£p kh√¥ng r∆°i v√†o b·∫•t k·ª≥ b∆∞·ªõc n√†o
    await update.message.reply_text(
        "‚ùå C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh th√™m s·∫£n ph·∫©m.\n\n"
        "Vui l√≤ng th·ª≠ l·∫°i.",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i menu qu·∫£n l√Ω", callback_data='manage_products')]])
    )
    return ADMIN_MENU

async def edit_product(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """X·ª≠ l√Ω ch·ªânh s·ª≠a s·∫£n ph·∫©m"""
    if not is_admin(update.effective_user.id):
        await update.callback_query.answer("B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán ch·ª©c nƒÉng n√†y.")
        return MAIN_MENU

    query = update.callback_query
    await query.answer()
    
    # L·∫•y ID s·∫£n ph·∫©m t·ª´ callback data
    product_id = int(query.data.split('_')[2])
    
    session = get_session()
    try:
        product = session.query(Product).get(product_id)
        if not product:
            await query.edit_message_text(
                "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m!",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i danh s√°ch", callback_data='list_products')]])
            )
            return ADMIN_MENU
            
        # L∆∞u ID s·∫£n ph·∫©m v√†o context ƒë·ªÉ s·ª≠ d·ª•ng trong c√°c h√†m edit_product_*
        context.user_data['editing_product_id'] = product_id
        
        # Hi·ªÉn th·ªã th√¥ng tin s·∫£n ph·∫©m v√† c√°c t√πy ch·ªçn ch·ªânh s·ª≠a
        status = "‚úÖ C√≥ s·∫µn" if product.is_available else "‚ùå H·∫øt h√†ng"
        text = f"*Ch·ªânh s·ª≠a s·∫£n ph·∫©m:*\n\n"
        text += f"*{product.name}*\n"
        text += f"Gi√°: {product.price:,} VNƒê\n"
        text += f"Danh m·ª•c: {product.category}\n"
        text += f"Tr·∫°ng th√°i: {status}\n"
        text += f"M√¥ t·∫£: {product.description or 'Kh√¥ng c√≥'}\n\n"
        text += f"Ch·ªçn th√¥ng tin b·∫°n mu·ªën ch·ªânh s·ª≠a:"
        
        # C√°c t√πy ch·ªçn ch·ªânh s·ª≠a
        keyboard = [
            [InlineKeyboardButton("‚úèÔ∏è S·ª≠a t√™n", callback_data=f'edit_name_{product_id}')],
            [InlineKeyboardButton("üí∞ S·ª≠a gi√°", callback_data=f'edit_price_{product_id}')],
            [InlineKeyboardButton("üìÇ S·ª≠a danh m·ª•c", callback_data=f'edit_category_{product_id}')],
            [InlineKeyboardButton("üìù S·ª≠a m√¥ t·∫£", callback_data=f'edit_description_{product_id}')],
            [InlineKeyboardButton("üîÑ ƒê·ªïi tr·∫°ng th√°i", callback_data=f'toggle_availability_{product_id}')],
            [InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i danh s√°ch", callback_data='list_products')]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            text=text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        return EDIT_PRODUCT
        
    finally:
        session.close()

async def update_product(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """X·ª≠ l√Ω c·∫≠p nh·∫≠t th√¥ng tin s·∫£n ph·∫©m"""
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán ch·ª©c nƒÉng n√†y.")
        return MAIN_MENU

    text = update.message.text
    session = get_session()
    
    try:
        # L·∫•y ID s·∫£n ph·∫©m t·ª´ context
        product_id = context.user_data.get('editing_product_id')
        if not product_id:
            await update.message.reply_text(
                "Kh√¥ng t√¨m th·∫•y th√¥ng tin s·∫£n ph·∫©m c·∫ßn ch·ªânh s·ª≠a!",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='list_products')]])
            )
            return ADMIN_MENU
            
        product = session.query(Product).get(product_id)
        if not product:
            await update.message.reply_text(
                "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m!",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='list_products')]])
            )
            return ADMIN_MENU

        # Ph√¢n t√≠ch th√¥ng tin m·ªõi
        parts = text.split('|')
        if len(parts) < 3:
            await update.message.reply_text(
                "Vui l√≤ng nh·∫≠p th√¥ng tin s·∫£n ph·∫©m theo ƒë·ªãnh d·∫°ng:\n"
                "T√™n m·ªõi | Gi√° m·ªõi | Danh m·ª•c m·ªõi | M√¥ t·∫£ m·ªõi\n\n"
                "V√≠ d·ª•:\n"
                "C√† ph√™ s·ªØa | 25000 | ƒê·ªì u·ªëng | C√† ph√™ v·ªõi s·ªØa ƒë·∫∑c",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='list_products')]])
            )
            return EDIT_PRODUCT

        # C·∫≠p nh·∫≠t th√¥ng tin s·∫£n ph·∫©m
        product.name = parts[0].strip()
        try:
            product.price = int(parts[1].strip())
        except ValueError:
            await update.message.reply_text(
                "Gi√° s·∫£n ph·∫©m ph·∫£i l√† s·ªë!",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='list_products')]])
            )
            return EDIT_PRODUCT
        product.category = parts[2].strip()
        product.description = parts[3].strip() if len(parts) > 3 else ""
        
        session.commit()
        
        # X√≥a ID s·∫£n ph·∫©m kh·ªèi context sau khi c·∫≠p nh·∫≠t th√†nh c√¥ng
        context.user_data.pop('editing_product_id', None)
        
        await update.message.reply_text(
            f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t s·∫£n ph·∫©m:\n\n"
            f"T√™n: {product.name}\n"
            f"Gi√°: {product.price:,} VNƒê\n"
            f"Danh m·ª•c: {product.category}\n"
            f"M√¥ t·∫£: {product.description}",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='list_products')]])
        )
        
        return ADMIN_MENU
    except Exception as e:
        session.rollback()
        await update.message.reply_text(
            f"C√≥ l·ªói x·∫£y ra: {str(e)}",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='list_products')]])
        )
        return EDIT_PRODUCT
    finally:
        session.close()

async def list_products(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Hi·ªÉn th·ªã danh s√°ch s·∫£n ph·∫©m cho admin"""
    if not is_admin(update.effective_user.id):
        await update.callback_query.answer("B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán ch·ª©c nƒÉng n√†y.")
        return MAIN_MENU

    query = update.callback_query
    await query.answer()
    
    session = get_session()
    try:
        # L·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m
        products = session.query(Product).all()
        
        if not products:
            await query.edit_message_text(
                "Ch∆∞a c√≥ s·∫£n ph·∫©m n√†o. H√£y th√™m s·∫£n ph·∫©m m·ªõi!",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='manage_products')]])
            )
            return ADMIN_MENU
        
        # T·∫°o danh s√°ch s·∫£n ph·∫©m theo danh m·ª•c
        text = "*Danh s√°ch s·∫£n ph·∫©m:*\n\n"
        keyboard = []
        
        for product in products:
            status = "‚úÖ C√≥ s·∫µn" if product.is_available else "‚ùå H·∫øt h√†ng"
            text += f"*{product.name}*\n"
            text += f"Gi√°: {product.price:,} VNƒê\n"
            text += f"Danh m·ª•c: {product.category}\n"
            text += f"Tr·∫°ng th√°i: {status}\n"
            text += f"M√¥ t·∫£: {product.description or 'Kh√¥ng c√≥'}\n\n"
            
            # Th√™m n√∫t ch·ªânh s·ª≠a cho m·ªói s·∫£n ph·∫©m
            keyboard.append([InlineKeyboardButton(f"‚úèÔ∏è Ch·ªânh s·ª≠a {product.name}", callback_data=f'edit_product_{product.id}')])
        
        # Th√™m n√∫t quay l·∫°i
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='manage_products')])
        
        await query.edit_message_text(
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
        
    finally:
        session.close()
    
    return ADMIN_MENU

async def edit_product_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """X·ª≠ l√Ω ch·ªânh s·ª≠a t√™n s·∫£n ph·∫©m"""
    query = update.callback_query
    await query.answer()
    
    product_id = int(query.data.split('_')[2])
    context.user_data['editing_product_id'] = product_id
    
    session = get_session()
    try:
        product = session.query(Product).get(product_id)
        if not product:
            await query.edit_message_text(
                "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m!",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i danh s√°ch", callback_data='list_products')]])
            )
            return ADMIN_MENU
        
        await query.edit_message_text(
            f"*ƒêang ch·ªânh s·ª≠a t√™n s·∫£n ph·∫©m*\n\n"
            f"T√™n hi·ªán t·∫°i: *{product.name}*\n\n"
            f"Vui l√≤ng nh·∫≠p t√™n m·ªõi cho s·∫£n ph·∫©m:",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô Quay l·∫°i th√¥ng tin s·∫£n ph·∫©m", callback_data=f'edit_product_{product_id}')]])
        )
        return EDIT_PRODUCT_NAME
    finally:
        session.close()

async def edit_product_price(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """X·ª≠ l√Ω ch·ªânh s·ª≠a gi√° s·∫£n ph·∫©m"""
    query = update.callback_query
    await query.answer()
    
    product_id = int(query.data.split('_')[2])
    context.user_data['editing_product_id'] = product_id
    
    session = get_session()
    try:
        product = session.query(Product).get(product_id)
        if not product:
            await query.edit_message_text(
                "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m!",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i danh s√°ch", callback_data='list_products')]])
            )
            return ADMIN_MENU
        
        await query.edit_message_text(
            f"*ƒêang ch·ªânh s·ª≠a gi√° s·∫£n ph·∫©m*\n\n"
            f"S·∫£n ph·∫©m: *{product.name}*\n"
            f"Gi√° hi·ªán t·∫°i: *{product.price:,} VNƒê*\n\n"
            f"Vui l√≤ng nh·∫≠p gi√° m·ªõi (ch·ªâ nh·∫≠p s·ªë, kh√¥ng c√≥ d·∫•u ph·∫©y):",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô Quay l·∫°i th√¥ng tin s·∫£n ph·∫©m", callback_data=f'edit_product_{product_id}')]])
        )
        return EDIT_PRODUCT_PRICE
    finally:
        session.close()

async def edit_product_category(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """X·ª≠ l√Ω ch·ªânh s·ª≠a danh m·ª•c s·∫£n ph·∫©m"""
    query = update.callback_query
    await query.answer()
    
    product_id = int(query.data.split('_')[2])
    context.user_data['editing_product_id'] = product_id
    
    session = get_session()
    try:
        product = session.query(Product).get(product_id)
        if not product:
            await query.edit_message_text(
                "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m!",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i danh s√°ch", callback_data='list_products')]])
            )
            return ADMIN_MENU
        
        # L·∫•y danh s√°ch c√°c danh m·ª•c hi·ªán c√≥
        categories = session.query(Product.category).distinct().all()
        categories = [category[0] for category in categories]
        
        text = f"*ƒêang ch·ªânh s·ª≠a danh m·ª•c s·∫£n ph·∫©m*\n\n"
        text += f"S·∫£n ph·∫©m: *{product.name}*\n"
        text += f"Danh m·ª•c hi·ªán t·∫°i: *{product.category}*\n\n"
        text += f"Vui l√≤ng nh·∫≠p danh m·ª•c m·ªõi (ho·∫∑c ch·ªçn t·ª´ danh s√°ch):"
        
        # T·∫°o keyboard v·ªõi c√°c danh m·ª•c hi·ªán c√≥
        keyboard = []
        for category in categories:
            if category != product.category:
                keyboard.append([InlineKeyboardButton(f"{category}", callback_data=f'set_category_{product_id}_{category}')])
        
        keyboard.append([InlineKeyboardButton("üîô Quay l·∫°i th√¥ng tin s·∫£n ph·∫©m", callback_data=f'edit_product_{product_id}')])
        
        await query.edit_message_text(
            text=text,
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return EDIT_PRODUCT_CATEGORY
    finally:
        session.close()

async def edit_product_description(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """X·ª≠ l√Ω ch·ªânh s·ª≠a m√¥ t·∫£ s·∫£n ph·∫©m"""
    query = update.callback_query
    await query.answer()
    
    product_id = int(query.data.split('_')[2])
    context.user_data['editing_product_id'] = product_id
    
    session = get_session()
    try:
        product = session.query(Product).get(product_id)
        if not product:
            await query.edit_message_text(
                "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m!",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i danh s√°ch", callback_data='list_products')]])
            )
            return ADMIN_MENU
        
        await query.edit_message_text(
            f"*ƒêang ch·ªânh s·ª≠a m√¥ t·∫£ s·∫£n ph·∫©m*\n\n"
            f"S·∫£n ph·∫©m: *{product.name}*\n"
            f"M√¥ t·∫£ hi·ªán t·∫°i: *{product.description or 'Kh√¥ng c√≥'}*\n\n"
            f"Vui l√≤ng nh·∫≠p m√¥ t·∫£ m·ªõi cho s·∫£n ph·∫©m:",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô Quay l·∫°i th√¥ng tin s·∫£n ph·∫©m", callback_data=f'edit_product_{product_id}')]])
        )
        return EDIT_PRODUCT_DESCRIPTION
    finally:
        session.close()

async def toggle_product_availability(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """ƒê·ªïi tr·∫°ng th√°i s·∫£n ph·∫©m (c√≥ s·∫µn/h·∫øt h√†ng)"""
    query = update.callback_query
    await query.answer()
    
    product_id = int(query.data.split('_')[2])
    
    session = get_session()
    try:
        product = session.query(Product).get(product_id)
        if not product:
            await query.edit_message_text(
                "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m!",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i danh s√°ch", callback_data='list_products')]])
            )
            return ADMIN_MENU
        
        # ƒê·ªïi tr·∫°ng th√°i s·∫£n ph·∫©m
        product.is_available = not product.is_available
        session.commit()
        
        status = "‚úÖ C√≥ s·∫µn" if product.is_available else "‚ùå H·∫øt h√†ng"
        await query.edit_message_text(
            f"‚úÖ ƒê√£ ƒë·ªïi tr·∫°ng th√°i s·∫£n ph·∫©m *{product.name}* th√†nh *{status}*",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô Quay l·∫°i th√¥ng tin s·∫£n ph·∫©m", callback_data=f'edit_product_{product_id}')]])
        )
        return EDIT_PRODUCT
    finally:
        session.close()

async def save_product_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """L∆∞u t√™n m·ªõi cho s·∫£n ph·∫©m"""
    new_name = update.message.text
    product_id = context.user_data.get('editing_product_id')
    
    if not product_id:
        await update.message.reply_text(
            "Kh√¥ng t√¨m th·∫•y th√¥ng tin s·∫£n ph·∫©m c·∫ßn ch·ªânh s·ª≠a!",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i danh s√°ch", callback_data='list_products')]])
        )
        return ADMIN_MENU
    
    session = get_session()
    try:
        product = session.query(Product).get(product_id)
        if not product:
            await update.message.reply_text(
                "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m!",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i danh s√°ch", callback_data='list_products')]])
            )
            return ADMIN_MENU
        
        old_name = product.name
        product.name = new_name
        session.commit()
        
        await update.message.reply_text(
            f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t t√™n s·∫£n ph·∫©m:\n\n"
            f"T√™n c≈©: *{old_name}*\n"
            f"T√™n m·ªõi: *{new_name}*",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô Quay l·∫°i s·∫£n ph·∫©m", callback_data=f'edit_product_{product_id}')]])
        )
        return EDIT_PRODUCT
    except Exception as e:
        session.rollback()
        await update.message.reply_text(
            f"C√≥ l·ªói x·∫£y ra: {str(e)}",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîÑ Th·ª≠ l·∫°i", callback_data=f'edit_name_{product_id}')]])
        )
        return EDIT_PRODUCT_NAME
    finally:
        session.close()

async def save_product_price(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """L∆∞u gi√° m·ªõi cho s·∫£n ph·∫©m"""
    new_price_text = update.message.text
    product_id = context.user_data.get('editing_product_id')
    
    if not product_id:
        await update.message.reply_text(
            "Kh√¥ng t√¨m th·∫•y th√¥ng tin s·∫£n ph·∫©m c·∫ßn ch·ªânh s·ª≠a!",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i danh s√°ch", callback_data='list_products')]])
        )
        return ADMIN_MENU
    
    session = get_session()
    try:
        product = session.query(Product).get(product_id)
        if not product:
            await update.message.reply_text(
                "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m!",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i danh s√°ch", callback_data='list_products')]])
            )
            return ADMIN_MENU
        
        try:
            new_price = int(new_price_text)
            if new_price <= 0:
                raise ValueError("Gi√° ph·∫£i l√† s·ªë d∆∞∆°ng")
        except ValueError:
            await update.message.reply_text(
                "‚ùå Gi√° s·∫£n ph·∫©m ph·∫£i l√† s·ªë d∆∞∆°ng!",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîÑ Th·ª≠ l·∫°i", callback_data=f'edit_price_{product_id}')],
                    [InlineKeyboardButton("üîô Quay l·∫°i s·∫£n ph·∫©m", callback_data=f'edit_product_{product_id}')]
                ])
            )
            return EDIT_PRODUCT_PRICE
        
        old_price = product.price
        product.price = new_price
        session.commit()
        
        await update.message.reply_text(
            f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t gi√° s·∫£n ph·∫©m *{product.name}*:\n\n"
            f"Gi√° c≈©: *{old_price:,} VNƒê*\n"
            f"Gi√° m·ªõi: *{new_price:,} VNƒê*",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô Quay l·∫°i s·∫£n ph·∫©m", callback_data=f'edit_product_{product_id}')]])
        )
        return EDIT_PRODUCT
    except Exception as e:
        session.rollback()
        await update.message.reply_text(
            f"C√≥ l·ªói x·∫£y ra: {str(e)}",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîÑ Th·ª≠ l·∫°i", callback_data=f'edit_price_{product_id}')]])
        )
        return EDIT_PRODUCT_PRICE
    finally:
        session.close()

async def save_product_category(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """L∆∞u danh m·ª•c m·ªõi cho s·∫£n ph·∫©m"""
    new_category = update.message.text
    product_id = context.user_data.get('editing_product_id')
    
    if not product_id:
        await update.message.reply_text(
            "Kh√¥ng t√¨m th·∫•y th√¥ng tin s·∫£n ph·∫©m c·∫ßn ch·ªânh s·ª≠a!",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i danh s√°ch", callback_data='list_products')]])
        )
        return ADMIN_MENU
    
    session = get_session()
    try:
        product = session.query(Product).get(product_id)
        if not product:
            await update.message.reply_text(
                "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m!",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i danh s√°ch", callback_data='list_products')]])
            )
            return ADMIN_MENU
        
        old_category = product.category
        product.category = new_category
        session.commit()
        
        await update.message.reply_text(
            f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t danh m·ª•c s·∫£n ph·∫©m *{product.name}*:\n\n"
            f"Danh m·ª•c c≈©: *{old_category}*\n"
            f"Danh m·ª•c m·ªõi: *{new_category}*",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô Quay l·∫°i s·∫£n ph·∫©m", callback_data=f'edit_product_{product_id}')]])
        )
        return EDIT_PRODUCT
    except Exception as e:
        session.rollback()
        await update.message.reply_text(
            f"C√≥ l·ªói x·∫£y ra: {str(e)}",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîÑ Th·ª≠ l·∫°i", callback_data=f'edit_category_{product_id}')]])
        )
        return EDIT_PRODUCT_CATEGORY
    finally:
        session.close()

async def set_product_category(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """ƒê·∫∑t danh m·ª•c t·ª´ danh s√°ch c√≥ s·∫µn"""
    query = update.callback_query
    await query.answer()
    
    parts = query.data.split('_')
    product_id = int(parts[2])
    new_category = parts[3]
    
    session = get_session()
    try:
        product = session.query(Product).get(product_id)
        if not product:
            await query.edit_message_text(
                "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m!",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i danh s√°ch", callback_data='list_products')]])
            )
            return ADMIN_MENU
        
        old_category = product.category
        product.category = new_category
        session.commit()
        
        await query.edit_message_text(
            f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t danh m·ª•c s·∫£n ph·∫©m *{product.name}*:\n\n"
            f"Danh m·ª•c c≈©: *{old_category}*\n"
            f"Danh m·ª•c m·ªõi: *{new_category}*",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô Quay l·∫°i s·∫£n ph·∫©m", callback_data=f'edit_product_{product_id}')]])
        )
        return EDIT_PRODUCT
    except Exception as e:
        session.rollback()
        await query.edit_message_text(
            f"C√≥ l·ªói x·∫£y ra: {str(e)}",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîÑ Th·ª≠ l·∫°i", callback_data=f'edit_category_{product_id}')]])
        )
        return EDIT_PRODUCT
    finally:
        session.close()

async def save_product_description(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """L∆∞u m√¥ t·∫£ m·ªõi cho s·∫£n ph·∫©m"""
    new_description = update.message.text
    product_id = context.user_data.get('editing_product_id')
    
    if not product_id:
        await update.message.reply_text(
            "Kh√¥ng t√¨m th·∫•y th√¥ng tin s·∫£n ph·∫©m c·∫ßn ch·ªânh s·ª≠a!",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i danh s√°ch", callback_data='list_products')]])
        )
        return ADMIN_MENU
    
    session = get_session()
    try:
        product = session.query(Product).get(product_id)
        if not product:
            await update.message.reply_text(
                "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m!",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i danh s√°ch", callback_data='list_products')]])
            )
            return ADMIN_MENU
        
        old_description = product.description or "Kh√¥ng c√≥"
        product.description = new_description
        session.commit()
        
        await update.message.reply_text(
            f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t m√¥ t·∫£ s·∫£n ph·∫©m *{product.name}*:\n\n"
            f"M√¥ t·∫£ c≈©: *{old_description}*\n"
            f"M√¥ t·∫£ m·ªõi: *{new_description}*",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô Quay l·∫°i s·∫£n ph·∫©m", callback_data=f'edit_product_{product_id}')]])
        )
        return EDIT_PRODUCT
    except Exception as e:
        session.rollback()
        await update.message.reply_text(
            f"C√≥ l·ªói x·∫£y ra: {str(e)}",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîÑ Th·ª≠ l·∫°i", callback_data=f'edit_description_{product_id}')]])
        )
        return EDIT_PRODUCT_DESCRIPTION
    finally:
        session.close()

async def show_category_products(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Hi·ªÉn th·ªã c√°c s·∫£n ph·∫©m trong danh m·ª•c ƒë·ªÉ ƒë·∫∑t m√≥n"""
    query = update.callback_query
    await query.answer()
    
    # L·∫•y t√™n danh m·ª•c t·ª´ callback data ho·∫∑c t·ª´ context
    if query.data.startswith("order_cat_"):
        category = query.data.replace("order_cat_", "")
        # L∆∞u l·∫°i danh m·ª•c ƒë·ªÉ s·ª≠ d·ª•ng sau n√†y
        context.user_data['last_category'] = category
    else:
        # S·ª≠ d·ª•ng danh m·ª•c ƒë√£ l∆∞u n·∫øu c√≥
        category = context.user_data.get('last_category', '')
    
    session = get_session()
    try:
        # L·∫•y s·∫£n ph·∫©m theo danh m·ª•c
        products = session.query(Product).filter(
            Product.category == category,
            Product.is_available == True
        ).all()
        
        if not products:
            await query.edit_message_text(
                text=f"Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o trong danh m·ª•c {category}",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='place_order')]])
            )
            return ORDER_ITEMS
        
        # Hi·ªÉn th·ªã s·∫£n ph·∫©m v√† cho ph√©p th√™m v√†o gi·ªè h√†ng
        text = f"*Danh m·ª•c: {category}*\n\n"
        keyboard = []
        
        for product in products:
            text += f"*{product.name}* - _{product.price:,.0f} VNƒê_\n{product.description or 'Kh√¥ng c√≥ m√¥ t·∫£'}\n\n"
            # Th√™m danh m·ª•c v√†o callback_data
            keyboard.append([InlineKeyboardButton(
                f"‚ûï Th√™m {product.name}", 
                callback_data=f"add_item_{product.id}_{category}"
            )])
        
        # Hi·ªÉn th·ªã th√¥ng tin b√†n ƒë√£ ch·ªçn (n·∫øu c√≥)
        selected_table = context.user_data.get('selected_table')
        if selected_table:
            table_info = f"\nü™ë ƒêang ƒë·∫∑t m√≥n cho: *B√†n {selected_table['number']}*"
            text += table_info
        
        keyboard.append([InlineKeyboardButton("üõí Xem gi·ªè h√†ng", callback_data='view_cart')])
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='place_order')])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            text=text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
        return ORDER_ITEMS
    finally:
        session.close()

async def add_to_cart(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng"""
    query = update.callback_query
    await query.answer()
    
    # L·∫•y ID s·∫£n ph·∫©m t·ª´ callback data
    product_id = int(query.data.split('_')[2])
    
    # Kh·ªüi t·∫°o gi·ªè h√†ng n·∫øu ch∆∞a c√≥
    if 'cart' not in context.user_data:
        context.user_data['cart'] = []
    
    session = get_session()
    try:
        # L·∫•y th√¥ng tin s·∫£n ph·∫©m
        product = session.query(Product).get(product_id)
        if not product:
            await query.edit_message_text(
                text="‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m!",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='place_order')]])
            )
            return ORDER_ITEMS
        
        # Ki·ªÉm tra xem s·∫£n ph·∫©m ƒë√£ c√≥ trong gi·ªè h√†ng ch∆∞a
        for item in context.user_data['cart']:
            if item['product_id'] == product_id:
                # TƒÉng s·ªë l∆∞·ª£ng n·∫øu ƒë√£ c√≥
                item['quantity'] += 1
                
                # Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng ng·∫Øn v√† ti·∫øp t·ª•c ·ªü trang hi·ªán t·∫°i
                await query.answer(f"ƒê√£ th√™m 1 {product.name} v√†o gi·ªè h√†ng! T·ªïng: {item['quantity']}")
                
                # Kh√¥ng chuy·ªÉn trang, ch·ªâ hi·ªÉn th·ªã th√¥ng b√°o
                category = query.data.split('_')[3] if len(query.data.split('_')) > 3 else None
                if category:
                    # N·∫øu c√≥ th√¥ng tin danh m·ª•c, tr·ªü l·∫°i danh m·ª•c ƒë√≥
                    context.user_data['last_category'] = category
                    return await show_category_products(update, context)
                else:
                    # N·∫øu kh√¥ng, ·ªü l·∫°i trang hi·ªán t·∫°i
                    return ORDER_ITEMS
        
        # Th√™m s·∫£n ph·∫©m m·ªõi v√†o gi·ªè h√†ng
        context.user_data['cart'].append({
            'product_id': product_id,
            'product_name': product.name,
            'price': product.price,
            'quantity': 1
        })
        
        # Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
        await query.answer(f"ƒê√£ th√™m {product.name} v√†o gi·ªè h√†ng!")
        
        # L∆∞u l·∫°i danh m·ª•c hi·ªán t·∫°i ƒë·ªÉ quay l·∫°i
        category = query.data.split('_')[3] if len(query.data.split('_')) > 3 else None
        if category:
            context.user_data['last_category'] = category
            # N·∫øu c√≥ th√¥ng tin danh m·ª•c, tr·ªü l·∫°i danh m·ª•c ƒë√≥
            return await show_category_products(update, context)
        
        # N·∫øu kh√¥ng c√≥ th√¥ng tin danh m·ª•c, hi·ªÉn th·ªã th√¥ng b√°o v√† gi·ªØ nguy√™n m√†n h√¨nh
        return ORDER_ITEMS
        
    except Exception as e:
        logger.error(f"L·ªói khi th√™m v√†o gi·ªè h√†ng: {str(e)}")
        await query.answer(f"L·ªói: {str(e)}")
        return ORDER_ITEMS
    finally:
        session.close()

async def view_cart(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Xem gi·ªè h√†ng"""
    query = update.callback_query
    await query.answer()
    
    # Ki·ªÉm tra xem gi·ªè h√†ng c√≥ d·ªØ li·ªáu kh√¥ng
    cart = context.user_data.get('cart', [])
    if not cart:
        await query.edit_message_text(
            text="üõí *Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng!*\n\nH√£y th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng tr∆∞·ªõc khi thanh to√°n.",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üçΩÔ∏è ƒê·∫∑t m√≥n", callback_data='place_order')]])
        )
        return ORDER_ITEMS
    
    # Th√¥ng tin b√†n ƒë√£ ƒë·∫∑t (n·∫øu c√≥)
    selected_table = context.user_data.get('selected_table')
    table_info = ""
    if selected_table:
        table_info = f"ü™ë *ƒê∆†N H√ÄNG CHO B√ÄN {selected_table['number']}*"
    else:
        table_info = "‚ö†Ô∏è *CH∆ØA CH·ªåN B√ÄN* - Vui l√≤ng ƒë·∫∑t b√†n tr∆∞·ªõc khi x√°c nh·∫≠n!"
    
    # Hi·ªÉn th·ªã th√¥ng tin gi·ªè h√†ng
    text = f"{table_info}\n\n"
    text += "üõí *Chi ti·∫øt gi·ªè h√†ng:*\n\n"
    total = 0
    
    for i, item in enumerate(cart):
        item_total = item['price'] * item['quantity']
        total += item_total
        text += f"{i + 1}. *{item['product_name']}*\n"
        text += f"   S·ªë l∆∞·ª£ng: {item['quantity']} x {item['price']:,.0f} VNƒê = {item_total:,.0f} VNƒê\n\n"
    
    text += f"*T·ªïng c·ªông: {total:,.0f} VNƒê*"
    
    # T·∫°o c√°c n√∫t ƒëi·ªÅu khi·ªÉn
    keyboard = [
        [InlineKeyboardButton("‚úÖ X√°c nh·∫≠n ƒë·∫∑t m√≥n", callback_data='confirm_order')],
        [InlineKeyboardButton("üóëÔ∏è X√≥a gi·ªè h√†ng", callback_data='clear_cart')],
        [InlineKeyboardButton("‚ûï Th√™m m√≥n kh√°c", callback_data='place_order')]
    ]
    
    # N·∫øu ch∆∞a ƒë·∫∑t b√†n, hi·ªÉn th·ªã n√∫t ƒë·∫∑t b√†n n·ªïi b·∫≠t
    if not selected_table:
        keyboard.insert(0, [InlineKeyboardButton("‚ö†Ô∏è ƒê·∫∂T B√ÄN NGAY ‚ö†Ô∏è", callback_data='reserve_table')])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    return CONFIRM_ORDER

async def clear_cart(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """X√≥a gi·ªè h√†ng"""
    query = update.callback_query
    await query.answer()
    
    # X√≥a gi·ªè h√†ng
    context.user_data['cart'] = []
    
    await query.edit_message_text(
        text="‚úÖ *ƒê√£ x√≥a gi·ªè h√†ng!*\n\nGi·ªè h√†ng c·ªßa b·∫°n hi·ªán ƒëang tr·ªëng.",
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üçΩÔ∏è ƒê·∫∑t m√≥n", callback_data='place_order')],
            [InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i menu ch√≠nh", callback_data='back_to_main')]
        ])
    )
    
    return ORDER_ITEMS

async def confirm_order(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """X√°c nh·∫≠n ƒë·∫∑t m√≥n"""
    query = update.callback_query
    await query.answer()
    
    # Ki·ªÉm tra xem gi·ªè h√†ng c√≥ d·ªØ li·ªáu kh√¥ng
    cart = context.user_data.get('cart', [])
    if not cart:
        await query.edit_message_text(
            text="‚ùå *Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng!*\n\nH√£y th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng tr∆∞·ªõc khi thanh to√°n.",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üçΩÔ∏è ƒê·∫∑t m√≥n", callback_data='place_order')]])
        )
        return ORDER_ITEMS
    
    # L·∫•y th√¥ng tin ng∆∞·ªùi d√πng
    user = update.effective_user
    user_id = user.id
    username = user.username or f"{user.first_name} {user.last_name or ''}"
    
    # L·∫•y th√¥ng tin b√†n (n·∫øu c√≥)
    selected_table = context.user_data.get('selected_table')
    table_number = selected_table['number'] if selected_table else None
    
    # T√≠nh t·ªïng ti·ªÅn
    total_amount = sum(item['price'] * item['quantity'] for item in cart)
    
    # Chu·∫©n b·ªã d·ªØ li·ªáu cho th√¥ng b√°o
    food_items = []
    drink_items = []
    other_items = []
    
    session = get_session()
    try:
        # Ph√¢n lo·∫°i c√°c m√≥n theo danh m·ª•c (ƒë·ªì ƒÉn, ƒë·ªì u·ªëng) tr∆∞·ªõc khi t·∫°o ƒë∆°n h√†ng
        for item in cart:
            product = session.query(Product).get(item['product_id'])
            if product:
                item_info = {
                    'name': product.name,
                    'quantity': item['quantity'],
                    'price': item['price'],
                    'category': product.category.lower() if product.category else ''
                }
                
                # Ph√¢n lo·∫°i m√≥n theo danh m·ª•c
                category = item_info['category']
                if 'ƒë·ªì u·ªëng' in category or 'n∆∞·ªõc' in category or 'c√† ph√™' in category or 'cafe' in category or 'coffee' in category or 'tea' in category or 'tr√†' in category:
                    drink_items.append(item_info)
                elif 'ƒë·ªì ƒÉn' in category or 'm√≥n ƒÉn' in category or 'b√°nh' in category or 'food' in category or 'cake' in category:
                    food_items.append(item_info)
                else:
                    other_items.append(item_info)
        
        # T·∫°o ƒë∆°n h√†ng m·ªõi
        new_order = Order(
            user_id=user_id,
            username=username,
            status='pending',
            table_number=table_number,
            total_amount=total_amount
        )
        
        session.add(new_order)
        session.flush()  # ƒê·ªÉ l·∫•y ID c·ªßa ƒë∆°n h√†ng m·ªõi
        
        # Th√™m c√°c s·∫£n ph·∫©m v√†o ƒë∆°n h√†ng
        for item in cart:
            order_item = OrderItem(
                order_id=new_order.id,
                product_id=item['product_id'],
                quantity=item['quantity'],
                price=item['price']
            )
            session.add(order_item)
        
        # L∆∞u tr·ªØ ID ƒë∆°n h√†ng tr∆∞·ªõc khi commit
        order_id = new_order.id
        
        # Commit t·∫•t c·∫£ c√°c thay ƒë·ªïi
        session.commit()
        
        # G·ª≠i th√¥ng b√°o ƒë·∫øn nh√≥m v·ªÅ ƒë∆°n h√†ng m·ªõi
        user_name = f"{user.first_name} {user.last_name or ''}"
        user_role = get_role(user_id)
        role_text = "Admin" if user_role == "admin" else "Thu ng√¢n" if user_role == "cashier" else "Nh√¢n vi√™n ph·ª•c v·ª•"
        
        # T·∫°o danh s√°ch m√≥n ƒë√£ ƒë·∫∑t
        items_text = ""
        for i, item in enumerate(cart, 1):
            item_total = item['price'] * item['quantity']
            items_text += f"{i}. {item['product_name']} - {item['quantity']} x {item['price']:,.0f}ƒë = {item_total:,.0f}ƒë\n"
        
        # T·∫°o th√¥ng b√°o ri√™ng cho b·∫øp
        kitchen_text = ""
        if food_items:
            kitchen_text += "üç≥ *M√ìN ƒÇN CHO B·∫æP:*\n"
            for i, item in enumerate(food_items, 1):
                kitchen_text += f"{i}. {item['name']} - *SL: {item['quantity']}*\n"
        
        # T·∫°o th√¥ng b√°o ri√™ng cho qu·∫ßy bar
        bar_text = ""
        if drink_items:
            bar_text += "ü•§ *ƒê·ªí U·ªêNG CHO QU·∫¶Y BAR:*\n"
            for i, item in enumerate(drink_items, 1):
                bar_text += f"{i}. {item['name']} - *SL: {item['quantity']}*\n"
        
        # T·∫°o th√¥ng b√°o ri√™ng cho c√°c m√≥n kh√°c
        other_text = ""
        if other_items:
            other_text += "üìå *C√ÅC M√ìN KH√ÅC:*\n"
            for i, item in enumerate(other_items, 1):
                other_text += f"{i}. {item['name']} - *SL: {item['quantity']}*\n"
        
        notification_message = (
            f"üîî *TH√îNG B√ÅO C√ì KH√ÅCH ƒê·∫∂T M√ìN*\n\n"
            f"ü™ë B√†n: *{table_number if table_number else 'Ch∆∞a ch·ªçn b√†n'}*\n"
            f"üë§ Ng∆∞·ªùi ph·ª•c v·ª•: *{user_name}* ({role_text})\n"
            f"üïí Th·ªùi gian: {datetime.now().strftime('%H:%M:%S %d/%m/%Y')}\n\n"
            f"üìã *CHI TI·∫æT ƒê∆†N H√ÄNG:*\n{items_text}\n"
        )
        
        if kitchen_text or bar_text or other_text:
            notification_message += "\nüßë‚Äçüç≥ *TH√îNG B√ÅO CHO C√ÅC B·ªò PH·∫¨N:*\n"
            if kitchen_text:
                notification_message += f"\n{kitchen_text}"
            if bar_text:
                notification_message += f"\n{bar_text}"
            if other_text:
                notification_message += f"\n{other_text}"
        
        notification_message += f"\nüí∞ *T·ªïng ti·ªÅn: {total_amount:,.0f}ƒë*\n\n"
        notification_message += "‚úÖ Vui l√≤ng c√°c b·ªô ph·∫≠n chu·∫©n b·ªã m√≥n theo y√™u c·∫ßu!\n"
        
        # T·∫°o inline keyboard v·ªõi c√°c n√∫t tr·∫°ng th√°i
        order_keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîÑ ƒêANG CHU·∫®N B·ªä", callback_data=f"order_preparing_table_{table_number}_order_{order_id}")]
        ])
        
        # G·ª≠i th√¥ng b√°o kh√¥ng ƒë·ªìng b·ªô ƒë·ªÉ kh√¥ng l√†m ch·∫≠m lu·ªìng ch√≠nh
        msg = await send_group_notification(context, notification_message, reply_markup=order_keyboard)
        
        # L∆∞u th√¥ng tin ng∆∞·ªùi ph·ª•c v·ª• cho ƒë∆°n h√†ng n√†y ƒë·ªÉ g·ª≠i th√¥ng b√°o khi ho√†n th√†nh
        if 'orders_by_server' not in context.bot_data:
            context.bot_data['orders_by_server'] = {}
        context.bot_data['orders_by_server'][order_id] = user_id
        
        # L∆∞u th√¥ng tin ƒë∆°n h√†ng m·ªõi th√†nh c√¥ng
        last_order_info = {
            'order_id': order_id,
            'table_number': table_number,
            'total_amount': total_amount,
            'items': [{'name': item['product_name'], 'quantity': item['quantity'], 'price': item['price']} for item in cart]
        }
        context.user_data['last_order_info'] = last_order_info
        
        # X√≥a gi·ªè h√†ng sau khi ƒë·∫∑t h√†ng th√†nh c√¥ng
        context.user_data['cart'] = []
        
        # Th√¥ng b√°o th√†nh c√¥ng
        text = "‚úÖ *ƒê·∫∑t m√≥n th√†nh c√¥ng!*\n\n"
        text += f"M√£ ƒë∆°n h√†ng: *#{order_id}*\n"
        
        if table_number:
            text += f"B√†n: *B√†n {table_number}*\n"
        
        text += f"T·ªïng ti·ªÅn: *{total_amount:,.0f} VNƒê*\n\n"
        text += "ƒê∆°n h√†ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒëi v√† ƒëang ch·ªù x√°c nh·∫≠n.\n"
        text += "Vui l√≤ng ƒë·ª£i nh√¢n vi√™n ph·ª•c v·ª• m√≥n ƒÉn c·ªßa b·∫°n.\n\n"
        text += "C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª• c·ªßa ch√∫ng t√¥i! üôè"
        
        # G·ª≠i tr·ª±c ti·∫øp tin nh·∫Øn x√°c nh·∫≠n ƒë·∫øn nh√¢n vi√™n ph·ª•c v·ª•
        server_confirmation = (
            f"üìã *X√ÅC NH·∫¨N ƒê∆†N H√ÄNG*\n\n"
            f"‚úÖ ƒê∆°n h√†ng *#{order_id}* ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n!\n\n"
            f"ü™ë *B√†n {table_number}* ƒë√£ ƒë·∫∑t c√°c m√≥n sau:\n\n"
        )
        
        # Chi ti·∫øt m√≥n ƒÉn ƒë√£ ƒë·∫∑t
        if food_items:
            server_confirmation += "*üçΩÔ∏è M√≥n ƒÉn:*\n"
            for i, item in enumerate(food_items, 1):
                server_confirmation += f"{i}. {item['name']} - SL: {item['quantity']}\n"
            server_confirmation += "\n"
            
        if drink_items:
            server_confirmation += "*ü•§ ƒê·ªì u·ªëng:*\n"
            for i, item in enumerate(drink_items, 1):
                server_confirmation += f"{i}. {item['name']} - SL: {item['quantity']}\n"
            server_confirmation += "\n"
            
        if other_items:
            server_confirmation += "*üßÅ M√≥n kh√°c:*\n"
            for i, item in enumerate(other_items, 1):
                server_confirmation += f"{i}. {item['name']} - SL: {item['quantity']}\n"
            server_confirmation += "\n"
        
        server_confirmation += f"üí∞ *T·ªïng ti·ªÅn: {total_amount:,.0f} VNƒê*\n\n"
        server_confirmation += "üïí B·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o khi nh√† b·∫øp ƒë√£ chu·∫©n b·ªã xong m√≥n."
        
        # G·ª≠i tin nh·∫Øn x√°c nh·∫≠n ƒë·∫øn ch√≠nh nh√¢n vi√™n ƒë√£ ƒë·∫∑t m√≥n
        await context.bot.send_message(
            chat_id=user_id,
            text=server_confirmation,
            parse_mode='Markdown'
        )
        
        await query.edit_message_text(
            text=text,
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üçΩÔ∏è ƒê·∫∑t th√™m m√≥n", callback_data='order_more')],
                [InlineKeyboardButton("üìã Xem menu", callback_data='view_menu')],
                [InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i menu ch√≠nh", callback_data='back_to_main')]
            ])
        )
        
        return MAIN_MENU
    except Exception as e:
        session.rollback()
        await query.edit_message_text(
            text=f"‚ùå *C√≥ l·ªói x·∫£y ra khi ƒë·∫∑t m√≥n:*\n\n{str(e)}\n\nVui l√≤ng th·ª≠ l·∫°i sau.",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîÑ Th·ª≠ l·∫°i", callback_data='confirm_order')],
                [InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='view_cart')]
            ])
        )
        return CONFIRM_ORDER
    finally:
        session.close()

async def request_bill(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Hi·ªÉn th·ªã danh s√°ch b√†n ƒë√£ ƒë·∫∑t ƒë·ªÉ y√™u c·∫ßu xu·∫•t bill."""
    query = update.callback_query
    user_id = update.effective_user.id
    
    # Ghi log h√†nh ƒë·ªông
    logger.info(f"Ng∆∞·ªùi d√πng {user_id} y√™u c·∫ßu xu·∫•t bill")
    
    # L·∫•y danh s√°ch b√†n c√≥ ƒë∆°n h√†ng
    conn = get_db_connection()
    try:
        cursor = conn.cursor()
        # Ch·ªâ l·∫•y c√°c b√†n c√≥ ƒë∆°n h√†ng ch∆∞a thanh to√°n
        cursor.execute("""
            SELECT DISTINCT t.id, t.name 
            FROM tables t
            JOIN orders o ON t.id = o.table_id
            WHERE o.status IN ('pending', 'confirmed', 'active')
            ORDER BY t.name
        """)
        tables = cursor.fetchall()
        conn.close()
        
        if not tables:
            await query.edit_message_text(
                text="Kh√¥ng c√≥ b√†n n√†o c·∫ßn xu·∫•t bill.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô Quay l·∫°i", callback_data="back_to_main")]
                ])
            )
            return get_appropriate_menu_state(user_id)
        
        # T·∫°o danh s√°ch b√†n ƒë·ªÉ ch·ªçn
        keyboard = []
        for table_id, table_name in tables:
            keyboard.append([InlineKeyboardButton(
                f"ü™ë {table_name}", callback_data=f"bill_for_table_{table_id}"
            )])
        
        keyboard.append([InlineKeyboardButton("üîô Quay l·∫°i", callback_data="back_to_main")])
        
        await query.edit_message_text(
            text="Ch·ªçn b√†n ƒë·ªÉ xem v√† y√™u c·∫ßu xu·∫•t bill:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        return SELECTING_BILL_TABLE
    except Exception as e:
        logger.error(f"L·ªói khi l·∫•y danh s√°ch b√†n: {str(e)}")
        await query.edit_message_text(
            text=f"ƒê√£ x·∫£y ra l·ªói: {str(e)}",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô Quay l·∫°i", callback_data="back_to_main")]
            ])
        )
        return get_appropriate_menu_state(user_id)

async def show_table_bill(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Hi·ªÉn th·ªã chi ti·∫øt h√≥a ƒë∆°n c·ªßa m·ªôt b√†n c·ª• th·ªÉ."""
    query = update.callback_query
    user_id = update.effective_user.id
    
    # X√°c nh·∫≠n callback query ƒë·ªÉ Telegram kh√¥ng hi·ªÉn th·ªã "loading..."
    await query.answer()
    
    # L·∫•y ID b√†n t·ª´ callback data
    callback_data = query.data
    logger.info(f"Callback data nh·∫≠n ƒë∆∞·ª£c: {callback_data}")
    
    # X·ª≠ l√Ω c√°c ƒë·ªãnh d·∫°ng callback data
    if callback_data.startswith("bill_for_table_"):
        table_id = int(callback_data.split("_")[-1])
    elif callback_data.startswith("bill_for_table:"):
        table_id = int(callback_data.split(":")[-1])
    else:
        logger.error(f"ƒê·ªãnh d·∫°ng callback data kh√¥ng h·ª£p l·ªá: {callback_data}")
        await query.edit_message_text(
            text="‚ùå C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω y√™u c·∫ßu. Vui l√≤ng th·ª≠ l·∫°i.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Quay l·∫°i", callback_data="request_bill")
            ]])
        )
        return BILL_ACTIONS
    
    # Log th√¥ng tin b√†n ƒë∆∞·ª£c ch·ªçn
    logger.info(f"Hi·ªÉn th·ªã bill cho b√†n c√≥ ID: {table_id}")
    
    conn = get_db_connection()
    try:
        cursor = conn.cursor()
        
        # L·∫•y th√¥ng tin b√†n
        cursor.execute("SELECT name FROM tables WHERE id = ?", (table_id,))
        table_result = cursor.fetchone()
        if not table_result:
            await query.edit_message_text(
                text="Kh√¥ng t√¨m th·∫•y th√¥ng tin b√†n.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô Quay l·∫°i", callback_data="request_bill")]
                ])
            )
            return get_appropriate_menu_state(user_id)
            
        table_name = table_result[0]
        
        # L·∫•y th√¥ng tin c√°c m√≥n ƒë√£ ƒë·∫∑t
        cursor.execute("""
            SELECT p.name, o.quantity, p.price, (o.quantity * p.price) as item_total
            FROM orders o
            JOIN products p ON o.product_id = p.id
            WHERE o.table_id = ? AND o.status IN ('pending', 'confirmed', 'active')
            ORDER BY p.name
        """, (table_id,))
        
        items = cursor.fetchall()
        if not items:
            await query.edit_message_text(
                text=f"B√†n {table_name} kh√¥ng c√≥ m√≥n n√†o c·∫ßn thanh to√°n.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô Quay l·∫°i", callback_data="request_bill")]
                ])
            )
            return get_appropriate_menu_state(user_id)
        
        # T√≠nh t·ªïng ti·ªÅn
        total_amount = sum(item[3] for item in items)
        
        # T·∫°o n·ªôi dung bill
        bill_text = f"üßæ *BILL B√ÄN {table_name}*\n\n"
        bill_text += "üìã *Chi ti·∫øt ƒë∆°n h√†ng:*\n"
        
        for i, (product_name, quantity, price, item_total) in enumerate(items, 1):
            bill_text += f"{i}. {product_name}\n"
            bill_text += f"   {quantity} x {price:,.0f}ƒë = {item_total:,.0f}ƒë\n"
        
        bill_text += f"\nüí∞ *T·ªïng c·ªông: {total_amount:,.0f}ƒë*"
        
        # Th√™m c√°c th√¥ng tin kh√°c n·∫øu c·∫ßn
        bill_text += f"\n\n‚è∞ Th·ªùi gian: {datetime.now().strftime('%H:%M:%S %d/%m/%Y')}"
        
        # Hi·ªÉn th·ªã bill v√† c√°c n√∫t t√πy ch·ªçn
        keyboard = [
            [InlineKeyboardButton("üì± G·ª≠i bill v√†o nh√≥m", callback_data=f"send_bill_to_group_{table_id}")],
            [InlineKeyboardButton("üí∞ Thanh to√°n", callback_data=f"process_payment_{table_id}")],
            [InlineKeyboardButton("üîô Quay l·∫°i", callback_data="request_bill")]
        ]
        
        # L∆∞u th√¥ng tin bill v√†o context ƒë·ªÉ s·ª≠ d·ª•ng khi g·ª≠i bill ho·∫∑c thanh to√°n
        context.user_data['current_bill'] = {
            'table_id': table_id,
            'table_name': table_name,
            'items': items,
            'total_amount': total_amount,
            'bill_text': bill_text
        }
        
        await query.edit_message_text(
            text=bill_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
        
        return BILL_ACTIONS
    except Exception as e:
        logger.error(f"L·ªói khi hi·ªÉn th·ªã bill: {str(e)}")
        await query.edit_message_text(
            text=f"ƒê√£ x·∫£y ra l·ªói khi hi·ªÉn th·ªã bill: {str(e)}",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô Quay l·∫°i", callback_data="request_bill")]
            ])
        )
        return get_appropriate_menu_state(user_id)
    finally:
        conn.close()

async def send_group_notification(context: ContextTypes.DEFAULT_TYPE, message: str, reply_markup=None, parse_mode: str = 'Markdown') -> bool:
    """G·ª≠i th√¥ng b√°o v√†o nh√≥m Telegram"""
    if not GROUP_CHAT_ID:
        logger.warning("Kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o v√†o nh√≥m: GROUP_CHAT_ID ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh")
        return False
        
    try:
        message_obj = await context.bot.send_message(
            chat_id=GROUP_CHAT_ID,
            text=message,
            parse_mode=parse_mode,
            reply_markup=reply_markup
        )
        logger.info(f"ƒê√£ g·ª≠i th√¥ng b√°o ƒë·∫øn nh√≥m {GROUP_CHAT_ID}")
        return message_obj  # Tr·∫£ v·ªÅ ƒë·ªëi t∆∞·ª£ng message ƒë·ªÉ c√≥ th·ªÉ s·ª≠ d·ª•ng sau n√†y
    except Exception as e:
        logger.error(f"L·ªói khi g·ª≠i th√¥ng b√°o ƒë·∫øn nh√≥m: {str(e)}")
        return False

async def send_bill_to_group(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """G·ª≠i th√¥ng tin bill v√†o nh√≥m Telegram"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    # X√°c nh·∫≠n callback query
    await query.answer()
    
    # L·∫•y ID b√†n t·ª´ callback data
    # S·ª≠a l·∫°i c√°ch x·ª≠ l√Ω callback_data ƒë·ªÉ t∆∞∆°ng th√≠ch v·ªõi pattern ƒë√£ ƒë·ªãnh nghƒ©a
    callback_data = query.data
    if '_' in callback_data:
        # Pattern hi·ªán t·∫°i: 'send_bill_to_group_123'
        table_id = int(callback_data.split("_")[-1])
    else:
        # Callback data c√≥ th·ªÉ c√≥ ƒë·ªãnh d·∫°ng kh√°c
        logger.error(f"ƒê·ªãnh d·∫°ng callback data kh√¥ng h·ª£p l·ªá: {callback_data}")
        await query.edit_message_text(
            text="‚ùå C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω y√™u c·∫ßu. Vui l√≤ng th·ª≠ l·∫°i.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Quay l·∫°i", callback_data="request_bill")
            ]])
        )
        return BILL_ACTIONS
    
    # L·∫•y th√¥ng tin bill t·ª´ context
    bill_info = context.user_data.get('current_bill', {})
    if not bill_info or bill_info.get('table_id') != table_id:
        # N·∫øu kh√¥ng c√≥ th√¥ng tin bill ho·∫∑c ID b√†n kh√¥ng kh·ªõp, quay l·∫°i hi·ªÉn th·ªã bill
        return await show_table_bill(update, context)
    
    try:
        # L·∫•y th√¥ng tin c·∫ßn thi·∫øt
        table_name = bill_info.get('table_name', f"B√†n {table_id}")
        bill_text = bill_info.get('bill_text', "Kh√¥ng c√≥ th√¥ng tin chi ti·∫øt")
        total_amount = bill_info.get('total_amount', 0)
        
        # T·∫°o th√¥ng b√°o cho nh√≥m v·ªõi emoji v√† ƒë·ªãnh d·∫°ng r√µ r√†ng h∆°n
        group_message = f"üì¢ *TH√îNG B√ÅO Y√äU C·∫¶U XU·∫§T BILL*\n\n"
        group_message += f"ü™ë *B√†n {table_name}* y√™u c·∫ßu thanh to√°n\n"
        group_message += f"üë§ Ng∆∞·ªùi ph·ª•c v·ª•: {update.effective_user.first_name} {update.effective_user.last_name or ''}\n"
        group_message += f"üïí Th·ªùi gian: {datetime.now().strftime('%H:%M:%S %d/%m/%Y')}\n\n"
        group_message += bill_text
        
        group_message += f"\n\n‚ö° ƒê·ªÅ ngh·ªã thu ng√¢n ki·ªÉm tra v√† ti·∫øn h√†nh thanh to√°n cho kh√°ch!"
        
        # G·ª≠i th√¥ng b√°o v√†o nh√≥m
        success = await send_group_notification(context, group_message)
        
        # Hi·ªÉn th·ªã k·∫øt qu·∫£ cho ng∆∞·ªùi d√πng
        if success:
            await query.edit_message_text(
                text=f"‚úÖ ƒê√£ g·ª≠i bill cho B√†n {table_name} v√†o nh√≥m Telegram th√†nh c√¥ng!\n\n"
                    f"T·ªïng ti·ªÅn: {total_amount:,.0f} VNƒê",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Quay l·∫°i", callback_data=f"bill_for_table_{table_id}")
                ]]),
                parse_mode='Markdown'
            )
        else:
            await query.edit_message_text(
                text=f"‚ö†Ô∏è Kh√¥ng th·ªÉ g·ª≠i bill v√†o nh√≥m Telegram.\n"
                    f"Vui l√≤ng ki·ªÉm tra c·∫•u h√¨nh GROUP_CHAT_ID ({GROUP_CHAT_ID}) ho·∫∑c qu·∫£n tr·ªã vi√™n v·ªÅ quy·ªÅn c·ªßa bot trong nh√≥m.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Quay l·∫°i", callback_data=f"bill_for_table_{table_id}")
                ]]),
                parse_mode='Markdown'
            )
        
        return BILL_ACTIONS
    except Exception as e:
        logger.error(f"L·ªói khi g·ª≠i bill v√†o nh√≥m: {str(e)}")
        await query.edit_message_text(
            text=f"‚ùå ƒê√£ x·∫£y ra l·ªói khi g·ª≠i bill v√†o nh√≥m: {str(e)}",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Quay l·∫°i", callback_data=f"bill_for_table_{table_id}")
            ]]),
            parse_mode='Markdown'
        )
        return BILL_ACTIONS

async def view_bills(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Hi·ªÉn th·ªã danh s√°ch c√°c b√†n c·∫ßn thanh to√°n."""
    query = update.callback_query
    user_id = update.effective_user.id
    
    # X√°c nh·∫≠n callback query
    await query.answer()
    
    conn = get_db_connection()
    try:
        cursor = conn.cursor()
        
        # L·∫•y danh s√°ch b√†n c√≥ ƒë∆°n h√†ng c·∫ßn thanh to√°n
        cursor.execute("""
            SELECT t.id, t.name, 
                  (SELECT SUM(o.quantity * p.price) 
                   FROM orders o 
                   JOIN products p ON o.product_id = p.id 
                   WHERE o.table_id = t.id AND o.status IN ('pending', 'confirmed')) as total_amount
            FROM tables t
            WHERE t.id IN (
                SELECT DISTINCT table_id FROM orders WHERE status IN ('pending', 'confirmed')
            )
            ORDER BY t.name
        """)
        tables = cursor.fetchall()
        
        if not tables:
            await query.edit_message_text(
                text="Kh√¥ng c√≥ b√†n n√†o c·∫ßn thanh to√°n.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Quay l·∫°i", callback_data="back_to_main")
                ]])
            )
            return get_appropriate_menu_state(user_id)
        
        # T·∫°o danh s√°ch c√°c b√†n c·∫ßn thanh to√°n
        message_text = "üìã *DANH S√ÅCH B√ÄN C·∫¶N THANH TO√ÅN*\n\n"
        
        keyboard = []
        for table_id, table_name, total_amount in tables:
            # B·ªè qua c√°c b√†n kh√¥ng c√≥ ƒë∆°n h√†ng
            if total_amount is None:
                continue
                
            message_text += f"‚Ä¢ B√†n {table_name}: {format_currency(total_amount)}\n"
            keyboard.append([InlineKeyboardButton(
                f"Xem bill B√†n {table_name}", callback_data=f"bill_for_table_{table_id}"
            )])
        
        # Th√™m n√∫t quay l·∫°i
        keyboard.append([InlineKeyboardButton("üîô Quay l·∫°i", callback_data="back_to_main")])
        
        await query.edit_message_text(
            text=message_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN
        )
        
        return SELECTING_BILL_TABLE
    except Exception as e:
        logger.error(f"L·ªói khi hi·ªÉn th·ªã danh s√°ch bill: {str(e)}")
        await query.edit_message_text(
            text=f"ƒê√£ x·∫£y ra l·ªói: {str(e)}",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Quay l·∫°i", callback_data="back_to_main")
            ]])
        )
        return get_appropriate_menu_state(user_id)
    finally:
        conn.close()

async def process_payment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """X·ª≠ l√Ω thanh to√°n cho m·ªôt b√†n."""
    query = update.callback_query
    user_id = update.effective_user.id
    
    # X√°c nh·∫≠n callback query
    await query.answer()
    
    # Ki·ªÉm tra quy·ªÅn truy c·∫≠p - ch·ªâ Admin v√† Thu ng√¢n c√≥ th·ªÉ thanh to√°n
    if not (is_admin(user_id) or is_cashier(user_id)):
        await query.edit_message_text(
            text="‚õî Ch·ªâ Admin v√† Thu ng√¢n m·ªõi c√≥ quy·ªÅn x·ª≠ l√Ω thanh to√°n.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô Quay l·∫°i", callback_data="request_bill")]
            ])
        )
        return BILL_ACTIONS
    
    # L·∫•y ID b√†n t·ª´ callback data
    callback_data = query.data
    logger.info(f"Callback process_payment nh·∫≠n ƒë∆∞·ª£c: {callback_data}")
    
    try:
        if callback_data.startswith("process_payment_"):
            table_id = int(callback_data.split("_")[-1])
        else:
            logger.error(f"ƒê·ªãnh d·∫°ng callback data kh√¥ng h·ª£p l·ªá: {callback_data}")
            await query.edit_message_text(
                text="‚ùå C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω y√™u c·∫ßu thanh to√°n. Vui l√≤ng th·ª≠ l·∫°i.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Quay l·∫°i", callback_data="request_bill")
                ]])
            )
            return BILL_ACTIONS
            
        # L·∫•y th√¥ng tin bill t·ª´ context
        bill_info = context.user_data.get('current_bill', {})
        
        # N·∫øu kh√¥ng c√≥ th√¥ng tin bill ho·∫∑c ID b√†n kh√¥ng kh·ªõp, quay l·∫°i hi·ªÉn th·ªã bill
        if not bill_info or bill_info.get('table_id') != table_id:
            await query.edit_message_text(
                text="‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin h√≥a ƒë∆°n cho b√†n n√†y ho·∫∑c th√¥ng tin ƒë√£ h·∫øt h·∫°n.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Quay l·∫°i", callback_data="request_bill")
                ]])
            )
            return BILL_ACTIONS
        
        # L·∫•y th√¥ng tin b√†n
        table_name = bill_info.get('table_name', f"B√†n {table_id}")
        total_amount = bill_info.get('total_amount', 0)
        items = bill_info.get('items', [])
        
        # T·∫°o h√≥a ƒë∆°n chi ti·∫øt cho b√†n
        bill_text = f"*H√ìA ƒê∆†N B√ÄN {table_name}*\n\n"
        bill_text += f"üïí Th·ªùi gian: {datetime.now().strftime('%H:%M:%S %d/%m/%Y')}\n"
        bill_text += f"üë§ Thu ng√¢n: {update.effective_user.first_name}\n\n"
        
        # T·ªïng h·ª£p t·∫•t c·∫£ c√°c m·ª•c t·ª´ t·∫•t c·∫£ c√°c ƒë∆°n h√†ng
        items_text = ""
        
        # Ki·ªÉm tra xem items l√† list hay tuple
        if items and isinstance(items[0], tuple):
            # Format t·ª´ tuple (t√™n, s·ªë l∆∞·ª£ng, gi√°, t·ªïng ti·ªÅn)
            for i, (product_name, quantity, price, item_total) in enumerate(items, 1):
                items_text += f"{i}. {product_name}: {quantity} x {price:,.0f}ƒë = {item_total:,.0f}ƒë\n"
        else:
            # Format t·ª´ dict
            for i, item in enumerate(items, 1):
                items_text += f"{i}. {item['name']}: {item['quantity']} x {item['price']:,.0f}ƒë = {item['quantity'] * item['price']:,.0f}ƒë\n"
        
        bill_text += "*CHI TI·∫æT S·∫¢N PH·∫®M:*\n"
        bill_text += items_text
        
        bill_text += f"\nüí∞ *T·ªïng ti·ªÅn: {total_amount:,.0f}ƒë*\n\n"
        bill_text += "‚úÖ B·∫°n c√≥ mu·ªën x√°c nh·∫≠n thanh to√°n cho b√†n n√†y kh√¥ng?"
        
        # T·∫°o b√†n ph√≠m v·ªõi n√∫t x√°c nh·∫≠n thanh to√°n
        keyboard = [
            [InlineKeyboardButton("‚úÖ X√ÅC NH·∫¨N THANH TO√ÅN", callback_data=f"confirm_pay_table_{table_id}")],
            [InlineKeyboardButton("‚ùå H·ª¶Y", callback_data=f"bill_for_table_{table_id}")]
        ]
        
        await query.edit_message_text(
            text=bill_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
        
        return BILL_ACTIONS
    except Exception as e:
        logger.error(f"L·ªói khi x·ª≠ l√Ω thanh to√°n: {str(e)}")
        await query.edit_message_text(
            text=f"‚ùå ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω thanh to√°n: {str(e)}",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Quay l·∫°i", callback_data="request_bill")
            ]])
        )
        return BILL_ACTIONS

async def confirm_pay_table(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """X√°c nh·∫≠n thanh to√°n v√† gi·∫£i ph√≥ng b√†n"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    # Ch·ªâ cho ph√©p Admin v√† Thu ng√¢n truy c·∫≠p
    if not (is_admin(user_id) or is_cashier(user_id)):
        await query.edit_message_text(
            text="‚õî Ch·ªâ Admin v√† Thu ng√¢n m·ªõi c√≥ quy·ªÅn thanh to√°n.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='back_to_main')]])
        )
        return MAIN_MENU
    
    # L·∫•y s·ªë b√†n t·ª´ callback data
    callback_data = query.data
    logger.info(f"Callback confirm_pay_table nh·∫≠n ƒë∆∞·ª£c: {callback_data}")
    
    try:
        if callback_data.startswith("confirm_pay_table_"):
            table_id = int(callback_data.split("_")[-1])
        else:
            logger.error(f"ƒê·ªãnh d·∫°ng callback data kh√¥ng h·ª£p l·ªá: {callback_data}")
            await query.edit_message_text(
                text="‚ùå C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω y√™u c·∫ßu thanh to√°n. Vui l√≤ng th·ª≠ l·∫°i.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Quay l·∫°i", callback_data="request_bill")
                ]])
            )
            return BILL_ACTIONS
        
        # L·∫•y th√¥ng tin bill t·ª´ context
        bill_info = context.user_data.get('current_bill', {})
        
        # N·∫øu kh√¥ng c√≥ th√¥ng tin bill ho·∫∑c ID b√†n kh√¥ng kh·ªõp, quay l·∫°i hi·ªÉn th·ªã bill
        if not bill_info or bill_info.get('table_id') != table_id:
            await query.edit_message_text(
                text="‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin h√≥a ƒë∆°n cho b√†n n√†y ho·∫∑c th√¥ng tin ƒë√£ h·∫øt h·∫°n.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Quay l·∫°i", callback_data="request_bill")
                ]])
            )
            return BILL_ACTIONS
            
        # K·∫øt n·ªëi database
        conn = get_db_connection()
        try:
            # B·∫Øt ƒë·∫ßu transaction
            conn.execute("BEGIN TRANSACTION")
            cursor = conn.cursor()
            
            # L·∫•y th√¥ng tin b√†n
            table_name = bill_info.get('table_name', f"B√†n {table_id}")
            items = bill_info.get('items', [])
            total_amount = bill_info.get('total_amount', 0)
            
            # C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng th√†nh 'completed' (ƒë√£ thanh to√°n)
            cursor.execute("""
                UPDATE orders
                SET status = 'completed', payment_time = ?
                WHERE table_id = ? AND status IN ('pending', 'confirmed', 'active')
            """, (datetime.now().isoformat(), table_id))
            
            # Ki·ªÉm tra s·ªë l∆∞·ª£ng row ƒë√£ c·∫≠p nh·∫≠t
            rows_updated = cursor.rowcount
            logger.info(f"ƒê√£ c·∫≠p nh·∫≠t {rows_updated} ƒë∆°n h√†ng cho b√†n {table_id}")
            
            if rows_updated == 0:
                # N·∫øu kh√¥ng c√≥ ƒë∆°n h√†ng n√†o ƒë∆∞·ª£c c·∫≠p nh·∫≠t, c√≥ th·ªÉ ƒë√£ ƒë∆∞·ª£c thanh to√°n tr∆∞·ªõc ƒë√≥
                logger.warning(f"Kh√¥ng c√≥ ƒë∆°n h√†ng n√†o ƒë∆∞·ª£c c·∫≠p nh·∫≠t khi thanh to√°n cho b√†n {table_id}")
                
                # Ki·ªÉm tra xem c√≥ ƒë∆°n h√†ng n√†o ƒë√£ ho√†n th√†nh tr∆∞·ªõc ƒë√≥ kh√¥ng
                cursor.execute("""
                    SELECT COUNT(*) FROM orders 
                    WHERE table_id = ? AND status = 'completed'
                """, (table_id,))
                completed_count = cursor.fetchone()[0]
                
                if completed_count > 0:
                    await query.edit_message_text(
                        text=f"‚ö†Ô∏è ƒê∆°n h√†ng cho {table_name} ƒë√£ ƒë∆∞·ª£c thanh to√°n tr∆∞·ªõc ƒë√≥!",
                        reply_markup=InlineKeyboardMarkup([[
                            InlineKeyboardButton("üîô Quay l·∫°i", callback_data="request_bill")
                        ]]),
                        parse_mode='Markdown'
                    )
                    conn.rollback()
                    return BILL_ACTIONS
            
            # ƒê·∫∑t l·∫°i tr·∫°ng th√°i b√†n th√†nh "tr·ªëng"
            cursor.execute("""
                UPDATE tables SET is_reserved = 0 WHERE id = ?
            """, (table_id,))
            
            # Commit transaction
            conn.commit()
            
            # X√≥a th√¥ng tin bill t·ª´ context v√¨ ƒë√£ thanh to√°n xong
            if 'current_bill' in context.user_data:
                del context.user_data['current_bill']
            
            # G·ª≠i th√¥ng b√°o ƒë·∫øn nh√≥m v·ªÅ vi·ªác thanh to√°n
            if items:
                user = update.effective_user
                user_name = f"{user.first_name} {user.last_name or ''}"
                user_role = get_role(user_id)
                role_text = "Admin" if user_role == "admin" else "Thu ng√¢n" if user_role == "cashier" else "Nh√¢n vi√™n ph·ª•c v·ª•"
                
                # T·∫°o danh s√°ch m√≥n ƒë√£ thanh to√°n
                items_text = ""
                
                # Ki·ªÉm tra xem items l√† list hay tuple
                if items and isinstance(items[0], tuple):
                    # Format t·ª´ tuple (t√™n, s·ªë l∆∞·ª£ng, gi√°, t·ªïng ti·ªÅn)
                    for i, (product_name, quantity, price, item_total) in enumerate(items, 1):
                        items_text += f"{i}. {product_name}: {quantity} x {price:,.0f}ƒë = {item_total:,.0f}ƒë\n"
                else:
                    # Format t·ª´ dict
                    for i, item in enumerate(items, 1):
                        items_text += f"{i}. {item['name']}: {item['quantity']} x {item['price']:,.0f}ƒë = {item['quantity'] * item['price']:,.0f}ƒë\n"
                
                notification_message = (
                    f"üí∞ *TH√îNG B√ÅO HO√ÄN T·∫§T THANH TO√ÅN*\n\n"
                    f"ü™ë B√†n: *{table_name}*\n"
                    f"üë§ Thu ng√¢n: *{user_name}* ({role_text})\n"
                    f"üïí Th·ªùi gian: {datetime.now().strftime('%H:%M:%S %d/%m/%Y')}\n\n"
                    f"üìã *Chi ti·∫øt h√≥a ƒë∆°n:*\n{items_text}\n"
                    f"üí∞ *T·ªïng ti·ªÅn: {total_amount:,.0f}ƒë*\n\n"
                    f"‚úÖ *Kh√°ch ƒë√£ thanh to√°n v√† r·ªùi ƒëi.*\n"
                    f"‚úÖ B√†n ƒë√£ ƒë∆∞·ª£c gi·∫£i ph√≥ng v√† s·∫µn s√†ng ph·ª•c v·ª• kh√°ch m·ªõi."
                )
                
                # G·ª≠i th√¥ng b√°o kh√¥ng ƒë·ªìng b·ªô ƒë·ªÉ kh√¥ng l√†m ch·∫≠m lu·ªìng ch√≠nh
                asyncio.create_task(send_group_notification(context, notification_message))
            
            # Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
            await query.edit_message_text(
                text=f"‚úÖ *Thanh to√°n th√†nh c√¥ng!*\n\n"
                    f"B√†n: *{table_name}*\n"
                    f"T·ªïng ti·ªÅn: *{total_amount:,.0f}ƒë*\n\n"
                    f"B√†n ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l·∫°i tr·∫°ng th√°i tr·ªëng v√† s·∫µn s√†ng ph·ª•c v·ª• kh√°ch m·ªõi.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Quay l·∫°i menu", callback_data="back_to_main")
                ]]),
                parse_mode='Markdown'
            )
            
            return get_appropriate_menu_state(user_id)
        except Exception as e:
            # Rollback transaction n·∫øu c√≥ l·ªói
            if conn:
                conn.rollback()
            logger.error(f"L·ªói khi thanh to√°n: {str(e)}")
            
            await query.edit_message_text(
                text=f"‚ùå ƒê√£ x·∫£y ra l·ªói khi thanh to√°n: {str(e)}",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Quay l·∫°i", callback_data="request_bill")
                ]]),
                parse_mode='Markdown'
            )
            return BILL_ACTIONS
        finally:
            if conn:
                conn.close()
    except Exception as e:
        logger.error(f"L·ªói khi x·ª≠ l√Ω thanh to√°n: {str(e)}")
        await query.edit_message_text(
            text=f"‚ùå ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω thanh to√°n: {str(e)}",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Quay l·∫°i", callback_data="request_bill")
            ]]),
            parse_mode='Markdown'
        )
        return BILL_ACTIONS

async def unreserve_table(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """H·ªßy ƒë·∫∑t b√†n"""
    if not is_admin(update.effective_user.id) and not is_cashier(update.effective_user.id):
        await update.callback_query.answer("B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán ch·ª©c nƒÉng n√†y.")
        return MAIN_MENU

    query = update.callback_query
    await query.answer()
    
    # L·∫•y ID b√†n t·ª´ callback data
    table_id = int(query.data.split('_')[1])
    
    session = get_session()
    try:
        table = session.query(Table).get(table_id)
        if not table:
            await query.edit_message_text(
                text="‚ùå Kh√¥ng t√¨m th·∫•y b√†n n√†y!",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='manage_tables')]])
            )
            return ADMIN_MENU
        
        # H·ªßy ƒë·∫∑t b√†n
        table.is_reserved = False
        session.commit()
        
        # G·ª≠i th√¥ng b√°o ƒë·∫øn nh√≥m
        user = update.effective_user
        user_name = f"{user.first_name} {user.last_name or ''}"
        user_role = get_role(user.id)
        role_text = "Admin" if user_role == "admin" else "Thu ng√¢n" if user_role == "cashier" else "Nh√¢n vi√™n ph·ª•c v·ª•"
        
        notification_message = (
            f"ü™ë *TH√îNG B√ÅO H·ª¶Y ƒê·∫∂T B√ÄN*\n\n"
            f"B√†n *{table.number}* ({table.capacity} ch·ªó) v·ª´a ƒë∆∞·ª£c h·ªßy ƒë·∫∑t\n"
            f"üë§ Ng∆∞·ªùi h·ªßy: *{user_name}* ({role_text})\n"
            f"üïí Th·ªùi gian: {datetime.now().strftime('%H:%M:%S %d/%m/%Y')}"
        )
        
        # G·ª≠i th√¥ng b√°o kh√¥ng ƒë·ªìng b·ªô ƒë·ªÉ kh√¥ng l√†m ch·∫≠m lu·ªìng ch√≠nh
        asyncio.create_task(send_group_notification(context, notification_message))
        
        # Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng v√† quay l·∫°i qu·∫£n l√Ω b√†n
        await query.edit_message_text(
            text=f"‚úÖ *ƒê√£ h·ªßy ƒë·∫∑t B√†n {table.number} th√†nh c√¥ng!*\n\nB√†n n√†y ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t v·ªÅ tr·∫°ng th√°i tr·ªëng.",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i qu·∫£n l√Ω b√†n", callback_data='manage_tables')]])
        )
        
        return ADMIN_MENU
    except Exception as e:
        session.rollback()
        await query.edit_message_text(
            text=f"‚ùå C√≥ l·ªói x·∫£y ra khi h·ªßy ƒë·∫∑t b√†n: {str(e)}",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Th·ª≠ l·∫°i", callback_data='manage_tables')]])
        )
        return ADMIN_MENU
    finally:
        session.close()

async def reset_all_tables(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Reset t·∫•t c·∫£ b√†n v·ªÅ tr·∫°ng th√°i tr·ªëng"""
    if not is_admin(update.effective_user.id):
        await update.callback_query.answer("Ch·ªâ Admin m·ªõi c√≥ quy·ªÅn reset t·∫•t c·∫£ c√°c b√†n.")
        return ADMIN_MENU

    query = update.callback_query
    await query.answer()
    
    # Hi·ªán th√¥ng b√°o x√°c nh·∫≠n tr∆∞·ªõc khi reset
    await query.edit_message_text(
        text="‚ö†Ô∏è *X√°c nh·∫≠n reset t·∫•t c·∫£ b√†n*\n\n"
             "H√†nh ƒë·ªông n√†y s·∫Ω ƒë·∫∑t t·∫•t c·∫£ c√°c b√†n v·ªÅ tr·∫°ng th√°i tr·ªëng.\n"
             "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ti·∫øp t·ª•c kh√¥ng?",
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ X√°c nh·∫≠n reset t·∫•t c·∫£", callback_data='confirm_reset_tables')],
            [InlineKeyboardButton("‚ùå H·ªßy", callback_data='manage_tables')]
        ])
    )
    
    return MANAGE_TABLES

async def confirm_reset_tables(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """X√°c nh·∫≠n v√† th·ª±c hi·ªán reset t·∫•t c·∫£ c√°c b√†n"""
    if not is_admin(update.effective_user.id):
        await update.callback_query.answer("Ch·ªâ Admin m·ªõi c√≥ quy·ªÅn reset t·∫•t c·∫£ c√°c b√†n.")
        return ADMIN_MENU

    query = update.callback_query
    await query.answer()
    
    conn = get_db_connection()
    try:
        # Reset t·∫•t c·∫£ b√†n v·ªÅ tr·∫°ng th√°i tr·ªëng
        cursor = conn.cursor()
        cursor.execute("UPDATE tables SET is_reserved = 0")
        reset_count = cursor.rowcount
        conn.commit()
        
        # G·ª≠i th√¥ng b√°o ƒë·∫øn nh√≥m
        user = update.effective_user
        user_name = f"{user.first_name} {user.last_name or ''}"
        
        if reset_count > 0:
            notification_message = (
                f"üîÑ *TH√îNG B√ÅO RESET B√ÄN*\n\n"
                f"Admin *{user_name}* v·ª´a reset {reset_count} b√†n v·ªÅ tr·∫°ng th√°i tr·ªëng\n"
                f"üïí Th·ªùi gian: {datetime.now().strftime('%H:%M:%S %d/%m/%Y')}"
            )
            
            # G·ª≠i th√¥ng b√°o kh√¥ng ƒë·ªìng b·ªô ƒë·ªÉ kh√¥ng l√†m ch·∫≠m lu·ªìng ch√≠nh
            asyncio.create_task(send_group_notification(context, notification_message))
        
        # Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng v√† quay l·∫°i qu·∫£n l√Ω b√†n
        message = f"‚úÖ *Reset b√†n th√†nh c√¥ng!*\n\n"
        
        if reset_count > 0:
            message += f"ƒê√£ reset {reset_count} b√†n v·ªÅ tr·∫°ng th√°i tr·ªëng."
        else:
            message += "T·∫•t c·∫£ c√°c b√†n ƒë√£ ·ªü tr·∫°ng th√°i tr·ªëng."
        
        await query.edit_message_text(
            text=message,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô Quay l·∫°i Qu·∫£n l√Ω b√†n", callback_data="manage_tables")]
            ]),
            parse_mode='Markdown'
        )
        
        return MANAGE_TABLES
    except Exception as e:
        logger.error(f"L·ªói khi reset b√†n: {str(e)}")
        await query.edit_message_text(
            text=f"‚ùå ƒê√£ x·∫£y ra l·ªói khi reset b√†n: {str(e)}",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô Quay l·∫°i", callback_data="manage_tables")]
            ])
        )
        return MANAGE_TABLES
    finally:
        if conn:
            conn.close()

async def edit_table_info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Hi·ªÉn th·ªã giao di·ªán ch·ªânh s·ª≠a th√¥ng tin b√†n"""
    query = update.callback_query
    await query.answer()
    
    # Ki·ªÉm tra quy·ªÅn admin
    if not is_admin(update.effective_user.id):
        await query.edit_message_text(
            text="‚õî Ch·ªâ Admin m·ªõi c√≥ quy·ªÅn ch·ªânh s·ª≠a th√¥ng tin b√†n.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='manage_tables')]])
        )
        return MANAGE_TABLES
    
    # L·∫•y danh s√°ch b√†n t·ª´ database
    conn = get_db_connection()
    try:
        cursor = conn.cursor()
        cursor.execute("SELECT id, name, capacity, is_reserved FROM tables ORDER BY name")
        tables = cursor.fetchall()
        
        if not tables:
            await query.edit_message_text(
                text="‚ùå Kh√¥ng c√≥ b√†n n√†o trong h·ªá th·ªëng.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='manage_tables')]])
            )
            return MANAGE_TABLES
        
        # Hi·ªÉn th·ªã danh s√°ch b√†n ƒë·ªÉ ch·ªçn
        message_text = "*CH·ªàNH S·ª¨A TH√îNG TIN B√ÄN*\n\nCh·ªçn b√†n c·∫ßn ch·ªânh s·ª≠a:\n"
        
        # T·∫°o c√°c n√∫t cho t·ª´ng b√†n
        keyboard = []
        for table_id, table_name, capacity, is_reserved in tables:
            status = "üî¥ ƒê√£ ƒë·∫∑t" if is_reserved else "üü¢ Tr·ªëng"
            keyboard.append([InlineKeyboardButton(
                f"{table_name} - {capacity} ch·ªó - {status}",
                callback_data=f"edit_table_{table_id}"
            )])
        
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='manage_tables')])
        
        await query.edit_message_text(
            text=message_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
        
        return MANAGE_TABLES
    except Exception as e:
        logger.error(f"L·ªói khi l·∫•y danh s√°ch b√†n: {str(e)}")
        await query.edit_message_text(
            text=f"‚ùå ƒê√£ x·∫£y ra l·ªói: {str(e)}",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='manage_tables')]])
        )
        return MANAGE_TABLES
    finally:
        conn.close()

async def edit_table_capacity(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Hi·ªÉn th·ªã giao di·ªán ch·ªânh s·ª≠a s·ª©c ch·ª©a c·ªßa b√†n"""
    query = update.callback_query
    await query.answer()
    
    # Ki·ªÉm tra quy·ªÅn admin
    if not is_admin(update.effective_user.id):
        await query.edit_message_text(
            text="‚õî Ch·ªâ Admin m·ªõi c√≥ quy·ªÅn ch·ªânh s·ª≠a th√¥ng tin b√†n.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='manage_tables')]])
        )
        return MANAGE_TABLES
    
    # L·∫•y ID b√†n t·ª´ callback data
    table_id = int(query.data.split("_")[2])
    
    # L·∫•y th√¥ng tin b√†n
    conn = get_db_connection()
    try:
        cursor = conn.cursor()
        cursor.execute("SELECT name, capacity FROM tables WHERE id = ?", (table_id,))
        table = cursor.fetchone()
        
        if not table:
            await query.edit_message_text(
                text="‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin b√†n.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='edit_table_info')]])
            )
            return MANAGE_TABLES
        
        table_name, current_capacity = table
        
        # Hi·ªÉn th·ªã giao di·ªán ch·ªânh s·ª≠a s·ª©c ch·ª©a
        message_text = f"*CH·ªàNH S·ª¨A S·ª®C CH·ª®A*\n\n"
        message_text += f"B√†n: *{table_name}*\n"
        message_text += f"S·ª©c ch·ª©a hi·ªán t·∫°i: *{current_capacity}* ng∆∞·ªùi\n\n"
        message_text += "Ch·ªçn s·ª©c ch·ª©a m·ªõi:"
        
        # T·∫°o c√°c n√∫t cho c√°c m·ª©c s·ª©c ch·ª©a ph·ªï bi·∫øn
        keyboard = []
        for capacity in [2, 4, 6, 8, 10, 12]:
            if capacity != current_capacity:
                keyboard.append([InlineKeyboardButton(
                    f"{capacity} ng∆∞·ªùi", 
                    callback_data=f"update_table_{table_id}_{capacity}"
                )])
        
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='edit_table_info')])
        
        await query.edit_message_text(
            text=message_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
        
        return MANAGE_TABLES
    except Exception as e:
        logger.error(f"L·ªói khi l·∫•y th√¥ng tin b√†n: {str(e)}")
        await query.edit_message_text(
            text=f"‚ùå ƒê√£ x·∫£y ra l·ªói: {str(e)}",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='edit_table_info')]])
        )
        return MANAGE_TABLES
    finally:
        conn.close()

async def update_table_capacity(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """C·∫≠p nh·∫≠t s·ª©c ch·ª©a c·ªßa b√†n"""
    query = update.callback_query
    await query.answer()
    
    # Ki·ªÉm tra quy·ªÅn admin
    if not is_admin(update.effective_user.id):
        await query.edit_message_text(
            text="‚õî Ch·ªâ Admin m·ªõi c√≥ quy·ªÅn c·∫≠p nh·∫≠t th√¥ng tin b√†n.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='manage_tables')]])
        )
        return MANAGE_TABLES
    
    # L·∫•y th√¥ng tin t·ª´ callback data
    # Format: update_table_<id>_<capacity>
    parts = query.data.split("_")
    table_id = int(parts[2])
    new_capacity = int(parts[3])
    
    # C·∫≠p nh·∫≠t s·ª©c ch·ª©a trong database
    conn = get_db_connection()
    try:
        cursor = conn.cursor()
        cursor.execute("SELECT name FROM tables WHERE id = ?", (table_id,))
        table_result = cursor.fetchone()
        
        if not table_result:
            await query.edit_message_text(
                text="‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin b√†n.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='edit_table_info')]])
            )
            return MANAGE_TABLES
        
        table_name = table_result[0]
        
        # C·∫≠p nh·∫≠t s·ª©c ch·ª©a
        cursor.execute("UPDATE tables SET capacity = ? WHERE id = ?", (new_capacity, table_id))
        conn.commit()
        
        # G·ª≠i th√¥ng b√°o ƒë·∫øn nh√≥m
        user = update.effective_user
        user_name = f"{user.first_name} {user.last_name or ''}"
        
        notification_message = (
            f"‚úèÔ∏è *TH√îNG B√ÅO C·∫¨P NH·∫¨T B√ÄN*\n\n"
            f"Admin *{user_name}* v·ª´a c·∫≠p nh·∫≠t s·ª©c ch·ª©a c·ªßa {table_name} th√†nh {new_capacity} ch·ªó ng·ªìi\n"
            f"üïí Th·ªùi gian: {datetime.now().strftime('%H:%M:%S %d/%m/%Y')}"
        )
        
        # G·ª≠i th√¥ng b√°o kh√¥ng ƒë·ªìng b·ªô ƒë·ªÉ kh√¥ng l√†m ch·∫≠m lu·ªìng ch√≠nh
        asyncio.create_task(send_group_notification(context, notification_message))
        
        # Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
        await query.edit_message_text(
            text=f"‚úÖ *C·∫≠p nh·∫≠t th√†nh c√¥ng!*\n\n"
                f"ƒê√£ thay ƒë·ªïi s·ª©c ch·ª©a c·ªßa {table_name} th√†nh {new_capacity} ng∆∞·ªùi.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô Quay l·∫°i danh s√°ch b√†n", callback_data='edit_table_info')],
                [InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i qu·∫£n l√Ω b√†n", callback_data='manage_tables')]
            ]),
            parse_mode='Markdown'
        )
        
        return MANAGE_TABLES
    except Exception as e:
        logger.error(f"L·ªói khi c·∫≠p nh·∫≠t s·ª©c ch·ª©a b√†n: {str(e)}")
        await query.edit_message_text(
            text=f"‚ùå ƒê√£ x·∫£y ra l·ªói: {str(e)}",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='edit_table_info')]])
        )
        return MANAGE_TABLES
    finally:
        conn.close()

async def delete_table(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Hi·ªÉn th·ªã giao di·ªán x√≥a b√†n"""
    query = update.callback_query
    await query.answer()
    
    # Ki·ªÉm tra quy·ªÅn admin
    if not is_admin(update.effective_user.id):
        await query.edit_message_text(
            text="‚õî Ch·ªâ Admin m·ªõi c√≥ quy·ªÅn x√≥a b√†n.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='manage_tables')]])
        )
        return MANAGE_TABLES
    
    # L·∫•y danh s√°ch b√†n t·ª´ database
    conn = get_db_connection()
    try:
        cursor = conn.cursor()
        
        # L·∫•y t·∫•t c·∫£ c√°c b√†n c√πng v·ªõi th√¥ng tin ƒë∆°n h√†ng ƒë·ªÉ bi·∫øt b√†n n√†o ƒëang c√≥ ƒë∆°n
        cursor.execute("""
            SELECT t.id, t.name, t.capacity, t.is_reserved,
                   (SELECT COUNT(*) FROM orders o WHERE o.table_id = t.id AND o.status != 'completed') as order_count
            FROM tables t
            ORDER BY t.name
        """)
        tables = cursor.fetchall()
        
        if not tables:
            await query.edit_message_text(
                text="‚ùå Kh√¥ng c√≥ b√†n n√†o trong h·ªá th·ªëng.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='manage_tables')]])
            )
            return MANAGE_TABLES
        
        # Hi·ªÉn th·ªã danh s√°ch b√†n ƒë·ªÉ ch·ªçn
        message_text = "*X√ìA B√ÄN*\n\n"
        message_text += "‚ö†Ô∏è *L∆∞u √Ω:* Ch·ªâ c√≥ th·ªÉ x√≥a b√†n tr·ªëng v√† kh√¥ng c√≥ ƒë∆°n h√†ng.\n\n"
        message_text += "Ch·ªçn b√†n c·∫ßn x√≥a:\n"
        
        # T·∫°o c√°c n√∫t cho t·ª´ng b√†n
        keyboard = []
        for table_id, table_name, capacity, is_reserved, order_count in tables:
            # Ki·ªÉm tra xem b√†n c√≥ th·ªÉ x√≥a kh√¥ng (ph·∫£i tr·ªëng v√† kh√¥ng c√≥ ƒë∆°n h√†ng)
            can_delete = not is_reserved and order_count == 0
            
            if can_delete:
                status = "üü¢ C√≥ th·ªÉ x√≥a"
                keyboard.append([InlineKeyboardButton(
                    f"{table_name} - {capacity} ch·ªó - {status}",
                    callback_data=f"pre_confirm_delete_table_{table_id}"
                )])
            else:
                if is_reserved:
                    status = "üî¥ ƒê√£ ƒë·∫∑t"
                elif order_count > 0:
                    status = "üî¥ C√≥ ƒë∆°n h√†ng"
                
                # B√†n kh√¥ng th·ªÉ x√≥a, nh∆∞ng v·∫´n hi·ªÉn th·ªã ƒë·ªÉ ng∆∞·ªùi d√πng bi·∫øt
                keyboard.append([InlineKeyboardButton(
                    f"{table_name} - {capacity} ch·ªó - {status}",
                    callback_data=f"table_cannot_delete_{table_id}"
                )])
        
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='manage_tables')])
        
        await query.edit_message_text(
            text=message_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
        
        return MANAGE_TABLES
    except Exception as e:
        logger.error(f"L·ªói khi l·∫•y danh s√°ch b√†n: {str(e)}")
        await query.edit_message_text(
            text=f"‚ùå ƒê√£ x·∫£y ra l·ªói: {str(e)}",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='manage_tables')]])
        )
        return MANAGE_TABLES
    finally:
        conn.close()

async def pre_confirm_delete_table(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Hi·ªÉn th·ªã x√°c nh·∫≠n tr∆∞·ªõc khi x√≥a b√†n"""
    query = update.callback_query
    await query.answer()
    
    # Ki·ªÉm tra quy·ªÅn admin
    if not is_admin(update.effective_user.id):
        await query.edit_message_text(
            text="‚õî Ch·ªâ Admin m·ªõi c√≥ quy·ªÅn x√≥a b√†n.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='manage_tables')]])
        )
        return MANAGE_TABLES
    
    # L·∫•y ID b√†n t·ª´ callback data
    table_id = int(query.data.split("_")[3])
    
    # L·∫•y th√¥ng tin b√†n
    conn = get_db_connection()
    try:
        cursor = conn.cursor()
        cursor.execute("SELECT name, capacity, is_reserved FROM tables WHERE id = ?", (table_id,))
        table = cursor.fetchone()
        
        if not table:
            await query.edit_message_text(
                text="‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin b√†n.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='delete_table')]])
            )
            return MANAGE_TABLES
        
        table_name, capacity, is_reserved = table
        
        # Ki·ªÉm tra xem b√†n c√≥ ƒë∆°n h√†ng kh√¥ng
        cursor.execute("""
            SELECT COUNT(*) FROM orders 
            WHERE table_id = ? AND status != 'completed'
        """, (table_id,))
        order_count = cursor.fetchone()[0]
        
        # Ki·ªÉm tra ƒëi·ªÅu ki·ªán x√≥a
        if is_reserved:
            await query.edit_message_text(
                text=f"‚ùå Kh√¥ng th·ªÉ x√≥a {table_name} v√¨ ƒëang ƒë∆∞·ª£c ƒë·∫∑t.\n\nH√£y ƒë·ªïi tr·∫°ng th√°i b√†n v·ªÅ tr·ªëng tr∆∞·ªõc khi x√≥a.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='delete_table')]])
            )
            return MANAGE_TABLES
        
        if order_count > 0:
            await query.edit_message_text(
                text=f"‚ùå Kh√¥ng th·ªÉ x√≥a {table_name} v√¨ c√≥ {order_count} ƒë∆°n h√†ng ch∆∞a ho√†n t·∫•t.\n\nH√£y x·ª≠ l√Ω t·∫•t c·∫£ ƒë∆°n h√†ng tr∆∞·ªõc khi x√≥a b√†n.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='delete_table')]])
            )
            return MANAGE_TABLES
        
        # Hi·ªÉn th·ªã th√¥ng b√°o x√°c nh·∫≠n
        await query.edit_message_text(
            text=f"‚ö†Ô∏è *X√°c nh·∫≠n x√≥a b√†n*\n\n"
                f"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a *{table_name}* ({capacity} ch·ªó ng·ªìi) kh·ªèi h·ªá th·ªëng kh√¥ng?\n\n"
                f"H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ kh√¥i ph·ª•c!",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ X√°c nh·∫≠n x√≥a", callback_data=f"confirm_delete_table_{table_id}")],
                [InlineKeyboardButton("‚ùå H·ªßy", callback_data="delete_table")]
            ]),
            parse_mode='Markdown'
        )
        
        return MANAGE_TABLES
    except Exception as e:
        logger.error(f"L·ªói khi chu·∫©n b·ªã x√≥a b√†n: {str(e)}")
        await query.edit_message_text(
            text=f"‚ùå ƒê√£ x·∫£y ra l·ªói: {str(e)}",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='delete_table')]])
        )
        return MANAGE_TABLES
    finally:
        conn.close()

async def confirm_delete_table(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """X√°c nh·∫≠n v√† th·ª±c hi·ªán x√≥a b√†n"""
    query = update.callback_query
    await query.answer()
    
    # Ki·ªÉm tra quy·ªÅn admin
    if not is_admin(update.effective_user.id):
        await query.edit_message_text(
            text="‚õî Ch·ªâ Admin m·ªõi c√≥ quy·ªÅn x√≥a b√†n.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='manage_tables')]])
        )
        return MANAGE_TABLES
    
    # L·∫•y ID b√†n t·ª´ callback data
    table_id = int(query.data.split("_")[3])
    
    # X√≥a b√†n t·ª´ database
    conn = get_db_connection()
    try:
        cursor = conn.cursor()
        
        # L·∫•y th√¥ng tin b√†n tr∆∞·ªõc khi x√≥a ƒë·ªÉ th√¥ng b√°o
        cursor.execute("SELECT name FROM tables WHERE id = ?", (table_id,))
        table = cursor.fetchone()
        
        if not table:
            await query.edit_message_text(
                text="‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin b√†n.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='delete_table')]])
            )
            return MANAGE_TABLES
        
        table_name = table[0]
        
        # Ki·ªÉm tra l·∫ßn cu·ªëi xem b√†n c√≥ th·ªèa ƒëi·ªÅu ki·ªán x√≥a kh√¥ng
        cursor.execute("SELECT is_reserved FROM tables WHERE id = ?", (table_id,))
        is_reserved = cursor.fetchone()[0]
        
        cursor.execute("""
            SELECT COUNT(*) FROM orders 
            WHERE table_id = ? AND status != 'completed'
        """, (table_id,))
        order_count = cursor.fetchone()[0]
        
        if is_reserved or order_count > 0:
            await query.edit_message_text(
                text=f"‚ùå Kh√¥ng th·ªÉ x√≥a {table_name}.\n\n"
                    f"B√†n ƒëang ƒë∆∞·ª£c ƒë·∫∑t ho·∫∑c c√≥ ƒë∆°n h√†ng ch∆∞a ho√†n t·∫•t.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='delete_table')]])
            )
            return MANAGE_TABLES
        
        # X√≥a b√†n
        cursor.execute("DELETE FROM tables WHERE id = ?", (table_id,))
        conn.commit()
        
        # G·ª≠i th√¥ng b√°o ƒë·∫øn nh√≥m
        user = update.effective_user
        user_name = f"{user.first_name} {user.last_name or ''}"
        
        notification_message = (
            f"üóëÔ∏è *TH√îNG B√ÅO X√ìA B√ÄN*\n\n"
            f"Admin *{user_name}* v·ª´a x√≥a {table_name} kh·ªèi h·ªá th·ªëng\n"
            f"üïí Th·ªùi gian: {datetime.now().strftime('%H:%M:%S %d/%m/%Y')}"
        )
        
        # G·ª≠i th√¥ng b√°o kh√¥ng ƒë·ªìng b·ªô ƒë·ªÉ kh√¥ng l√†m ch·∫≠m lu·ªìng ch√≠nh
        asyncio.create_task(send_group_notification(context, notification_message))
        
        # Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
        await query.edit_message_text(
            text=f"‚úÖ *X√≥a b√†n th√†nh c√¥ng!*\n\n"
                f"ƒê√£ x√≥a {table_name} kh·ªèi h·ªá th·ªëng.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô Quay l·∫°i danh s√°ch b√†n", callback_data='delete_table')],
                [InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i qu·∫£n l√Ω b√†n", callback_data='manage_tables')]
            ]),
            parse_mode='Markdown'
        )
        
        return MANAGE_TABLES
    except Exception as e:
        logger.error(f"L·ªói khi x√≥a b√†n: {str(e)}")
        await query.edit_message_text(
            text=f"‚ùå ƒê√£ x·∫£y ra l·ªói: {str(e)}",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='delete_table')]])
        )
        return MANAGE_TABLES
    finally:
        conn.close()

async def manage_table_status(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Hi·ªÉn th·ªã giao di·ªán qu·∫£n l√Ω tr·∫°ng th√°i b√†n"""
    query = update.callback_query
    await query.answer()
    
    # Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng l√† admin ho·∫∑c thu ng√¢n
    user_id = update.effective_user.id
    if not (is_admin(user_id) or is_cashier(user_id)):
        await query.edit_message_text(
            text="‚õî B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p v√†o khu v·ª±c n√†y.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='back_to_main')]])
        )
        return MAIN_MENU
    
    # L·∫•y danh s√°ch b√†n t·ª´ database
    conn = get_db_connection()
    try:
        cursor = conn.cursor()
        
        # L·∫•y t·∫•t c·∫£ c√°c b√†n c√πng v·ªõi th√¥ng tin ƒë∆°n h√†ng ƒë·ªÉ bi·∫øt b√†n n√†o ƒëang c√≥ ƒë∆°n
        cursor.execute("""
            SELECT t.id, t.name, t.capacity, t.is_reserved,
                   (SELECT COUNT(*) FROM orders o WHERE o.table_id = t.id AND o.status != 'completed') as order_count
            FROM tables t
            ORDER BY t.name
        """)
        tables = cursor.fetchall()
        
        if not tables:
            await query.edit_message_text(
                text="‚ùå Kh√¥ng c√≥ b√†n n√†o trong h·ªá th·ªëng.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='manage_tables')]])
            )
            return MANAGE_TABLES
        
        # Hi·ªÉn th·ªã danh s√°ch b√†n ƒë·ªÉ qu·∫£n l√Ω tr·∫°ng th√°i
        message_text = "*QU·∫¢N L√ù TR·∫†NG TH√ÅI B√ÄN*\n\n"
        
        # Ph√¢n chia b√†n theo tr·∫°ng th√°i
        reserved_tables = []
        available_tables = []
        
        for table_id, table_name, capacity, is_reserved, order_count in tables:
            table_info = {
                'id': table_id,
                'name': table_name,
                'capacity': capacity,
                'is_reserved': is_reserved,
                'order_count': order_count
            }
            
            if is_reserved:
                reserved_tables.append(table_info)
            else:
                available_tables.append(table_info)
        
        # Hi·ªÉn th·ªã b√†n ƒë√£ ƒë·∫∑t
        if reserved_tables:
            message_text += "üî¥ *B√ÄN ƒê√É ƒê·∫∂T:*\n"
            for table in reserved_tables:
                status = f"({table['order_count']} ƒë∆°n h√†ng)" if table['order_count'] > 0 else "(Kh√¥ng c√≥ ƒë∆°n)"
                message_text += f"‚Ä¢ {table['name']} - {table['capacity']} ch·ªó {status}\n"
            message_text += "\n"
        
        # Hi·ªÉn th·ªã b√†n tr·ªëng
        if available_tables:
            message_text += "üü¢ *B√ÄN TR·ªêNG:*\n"
            for table in available_tables:
                message_text += f"‚Ä¢ {table['name']} - {table['capacity']} ch·ªó\n"
            message_text += "\n"
        
        message_text += "Ch·ªçn b√†n ƒë·ªÉ thay ƒë·ªïi tr·∫°ng th√°i:"
        
        # T·∫°o n√∫t cho t·ª´ng b√†n
        keyboard = []
        
        # N√∫t ƒë·ªÉ ƒë·ªïi tr·∫°ng th√°i b√†n ƒë√£ ƒë·∫∑t th√†nh tr·ªëng
        if reserved_tables:
            keyboard.append([InlineKeyboardButton("üü¢ B√ÄN ƒê√É ƒê·∫∂T ‚Üí TR·ªêNG", callback_data='dummy_separator')])
            for table in reserved_tables:
                # N·∫øu b√†n c√≥ ƒë∆°n h√†ng, th√™m c·∫£nh b√°o
                button_text = f"{table['name']} {'‚ö†Ô∏è C√≥ ƒë∆°n h√†ng' if table['order_count'] > 0 else ''}"
                keyboard.append([InlineKeyboardButton(
                    button_text, 
                    callback_data=f"unreserve_{table['id']}"
                )])
        
        # N√∫t ƒë·ªÉ ƒë·ªïi tr·∫°ng th√°i b√†n tr·ªëng th√†nh ƒë√£ ƒë·∫∑t
        if available_tables:
            keyboard.append([InlineKeyboardButton("üî¥ B√ÄN TR·ªêNG ‚Üí ƒê√É ƒê·∫∂T", callback_data='dummy_separator')])
            for table in available_tables:
                keyboard.append([InlineKeyboardButton(
                    f"{table['name']}", 
                    callback_data=f"reserve_{table['id']}"
                )])
        
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='manage_tables')])
        
        await query.edit_message_text(
            text=message_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
        
        return MANAGE_TABLES
    except Exception as e:
        logger.error(f"L·ªói khi qu·∫£n l√Ω tr·∫°ng th√°i b√†n: {str(e)}")
        await query.edit_message_text(
            text=f"‚ùå ƒê√£ x·∫£y ra l·ªói: {str(e)}",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='manage_tables')]])
        )
        return MANAGE_TABLES
    finally:
        conn.close()

async def quick_payment_by_table(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Hi·ªÉn th·ªã giao di·ªán thanh to√°n nhanh theo b√†n"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    # Ch·ªâ cho ph√©p Admin v√† Thu ng√¢n truy c·∫≠p
    if not (is_admin(user_id) or is_cashier(user_id)):
        await query.edit_message_text(
            text="‚õî Ch·ªâ Admin v√† Thu ng√¢n m·ªõi c√≥ quy·ªÅn thanh to√°n.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='back_to_main')]])
        )
        return MAIN_MENU
    
    # L·∫•y danh s√°ch b√†n t·ª´ database
    conn = get_db_connection()
    try:
        cursor = conn.cursor()
        
        # L·∫•y t·∫•t c·∫£ c√°c b√†n c√≥ ƒë∆°n h√†ng ch∆∞a thanh to√°n
        cursor.execute("""
            SELECT t.id, t.name, t.capacity, t.is_reserved,
                   (SELECT COUNT(*) FROM orders o WHERE o.table_id = t.id AND o.status != 'completed') as order_count,
                   (SELECT SUM(o.quantity * p.price) FROM orders o 
                    JOIN products p ON o.product_id = p.id 
                    WHERE o.table_id = t.id AND o.status != 'completed') as total_amount
            FROM tables t
            WHERE t.is_reserved = 1
            ORDER BY t.name
        """)
        tables = cursor.fetchall()
        
        # L·ªçc ch·ªâ l·∫•y c√°c b√†n c√≥ ƒë∆°n h√†ng ch∆∞a thanh to√°n
        tables_with_orders = [t for t in tables if t[4] > 0 and t[5] is not None]
        
        if not tables_with_orders:
            await query.edit_message_text(
                text="Kh√¥ng c√≥ b√†n n√†o c·∫ßn thanh to√°n.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='manage_tables')]])
            )
            return MANAGE_TABLES
        
        # Hi·ªÉn th·ªã danh s√°ch b√†n ƒë·ªÉ thanh to√°n
        message_text = "*THANH TO√ÅN THEO B√ÄN*\n\n"
        message_text += "Ch·ªçn b√†n ƒë·ªÉ xem chi ti·∫øt v√† thanh to√°n:\n\n"
        
        for table_id, table_name, capacity, is_reserved, order_count, total_amount in tables_with_orders:
            message_text += f"‚Ä¢ {table_name} - {order_count} m√≥n - {total_amount:,.0f}ƒë\n"
        
        message_text += "\nCh·ªçn b√†n ƒë·ªÉ thanh to√°n:"
        
        # T·∫°o n√∫t cho t·ª´ng b√†n
        keyboard = []
        for table_id, table_name, capacity, is_reserved, order_count, total_amount in tables_with_orders:
            keyboard.append([InlineKeyboardButton(
                f"{table_name} - {total_amount:,.0f}ƒë", 
                callback_data=f"pay_table_{table_id}"
            )])
        
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='manage_tables')])
        
        await query.edit_message_text(
            text=message_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
        
        return MANAGE_TABLES
    except Exception as e:
        logger.error(f"L·ªói khi hi·ªÉn th·ªã giao di·ªán thanh to√°n: {str(e)}")
        await query.edit_message_text(
            text=f"‚ùå ƒê√£ x·∫£y ra l·ªói: {str(e)}",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='manage_tables')]])
        )
        return MANAGE_TABLES
    finally:
        conn.close()

async def pay_table(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """X·ª≠ l√Ω thanh to√°n cho m·ªôt b√†n c·ª• th·ªÉ"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    # Ch·ªâ cho ph√©p Admin v√† Thu ng√¢n truy c·∫≠p
    if not (is_admin(user_id) or is_cashier(user_id)):
        await query.edit_message_text(
            text="‚õî Ch·ªâ Admin v√† Thu ng√¢n m·ªõi c√≥ quy·ªÅn thanh to√°n.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='back_to_main')]])
        )
        return MAIN_MENU
    
    # L·∫•y ID b√†n t·ª´ callback data
    table_id = int(query.data.split('_')[2])
    
    # L·∫•y th√¥ng tin h√≥a ƒë∆°n
    conn = get_db_connection()
    try:
        cursor = conn.cursor()
        
        # L·∫•y th√¥ng tin b√†n
        cursor.execute("SELECT name FROM tables WHERE id = ?", (table_id,))
        table_result = cursor.fetchone()
        
        if not table_result:
            await query.edit_message_text(
                text=f"‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin b√†n.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='quick_payment_by_table')]])
            )
            return MANAGE_TABLES
        
        table_name = table_result[0]
        
        # L·∫•y th√¥ng tin c√°c m√≥n ƒë√£ ƒë·∫∑t
        cursor.execute("""
            SELECT p.name, o.quantity, p.price, (o.quantity * p.price) as item_total, o.id
            FROM orders o
            JOIN products p ON o.product_id = p.id
            WHERE o.table_id = ? AND o.status != 'completed'
            ORDER BY p.name
        """, (table_id,))
        
        items = cursor.fetchall()
        if not items:
            await query.edit_message_text(
                text=f"‚ùå B√†n {table_name} kh√¥ng c√≥ m√≥n n√†o c·∫ßn thanh to√°n.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='quick_payment_by_table')]])
            )
            return MANAGE_TABLES
        
        # T√≠nh t·ªïng ti·ªÅn
        total_amount = sum(item[3] for item in items)
        
        # T·∫°o h√≥a ƒë∆°n chi ti·∫øt cho b√†n
        bill_text = f"*H√ìA ƒê∆†N B√ÄN {table_name}*\n\n"
        bill_text += f"üïí Th·ªùi gian: {datetime.now().strftime('%H:%M:%S %d/%m/%Y')}\n"
        bill_text += f"üë§ Thu ng√¢n: {update.effective_user.first_name}\n\n"
        
        # T·ªïng h·ª£p t·∫•t c·∫£ c√°c m·ª•c t·ª´ t·∫•t c·∫£ c√°c ƒë∆°n h√†ng
        order_items = []
        for product_name, quantity, price, item_total, order_id in items:
            order_items.append({
                'name': product_name,
                'quantity': quantity,
                'price': price,
                'total': item_total,
                'id': order_id
            })
        
        # T√≠nh t·ªïng s·ªë ti·ªÅn v√† hi·ªÉn th·ªã chi ti·∫øt h√≥a ƒë∆°n
        bill_text += "*CHI TI·∫æT S·∫¢N PH·∫®M:*\n"
        for idx, item in enumerate(order_items, 1):
            bill_text += f"{idx}. {item['name']} - {item['quantity']} x {item['price']:,.0f}ƒë = {item['total']:,.0f}ƒë\n"
        
        bill_text += f"\nüí∞ *T·ªïng ti·ªÅn: {total_amount:,.0f}ƒë*\n\n"
        bill_text += "B·∫°n c√≥ mu·ªën x√°c nh·∫≠n thanh to√°n cho b√†n n√†y kh√¥ng?"
        
        # L∆∞u th√¥ng tin bill v√†o context ƒë·ªÉ s·ª≠ d·ª•ng khi thanh to√°n
        context.user_data['current_bill'] = {
            'table_id': table_id,
            'table_name': table_name,
            'items': order_items,
            'total_amount': total_amount,
            'bill_text': bill_text
        }
        
        # T·∫°o b√†n ph√≠m v·ªõi n√∫t x√°c nh·∫≠n thanh to√°n
        keyboard = [
            [InlineKeyboardButton("‚úÖ X√ÅC NH·∫¨N THANH TO√ÅN", callback_data=f"confirm_pay_table_{table_id}")],
            [InlineKeyboardButton("‚ùå H·ª¶Y", callback_data="quick_payment_by_table")]
        ]
        
        await query.edit_message_text(
            text=bill_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
        
        return MANAGE_TABLES
    except Exception as e:
        logger.error(f"L·ªói khi x·ª≠ l√Ω thanh to√°n: {str(e)}")
        await query.edit_message_text(
            text=f"‚ùå ƒê√£ x·∫£y ra l·ªói: {str(e)}",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='quick_payment_by_table')]])
        )
        return MANAGE_TABLES
    finally:
        conn.close()

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Hi·ªÉn th·ªã menu ch√≠nh cho admin"""
    query = update.callback_query
    await query.answer()
    
    # Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng l√† admin
    if not is_admin(update.effective_user.id):
        await query.edit_message_text(
            text="‚õî B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p v√†o khu v·ª±c n√†y.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='back_to_main')]])
        )
        return MAIN_MENU
    
    # Hi·ªÉn th·ªã menu admin
    keyboard = [
        [InlineKeyboardButton("ü™ë Qu·∫£n l√Ω b√†n", callback_data='manage_tables')],
        [InlineKeyboardButton("üçî Qu·∫£n l√Ω m√≥n ƒÉn", callback_data='manage_products')],
        [InlineKeyboardButton("üìä B√°o c√°o doanh thu", callback_data='view_reports')],
        [InlineKeyboardButton("üí∞ Qu·∫£n l√Ω thanh to√°n", callback_data='view_bills')],
        [InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='back_to_main')]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text="*TRANG QU·∫¢N TR·ªä*\nVui l√≤ng ch·ªçn ch·ª©c nƒÉng qu·∫£n tr·ªã:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    return ADMIN_MENU

async def view_orders(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Hi·ªÉn th·ªã danh s√°ch ƒë∆°n h√†ng"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    # Ch·ªâ Admin v√† Thu ng√¢n c√≥ th·ªÉ xem danh s√°ch ƒë∆°n h√†ng
    if not (is_admin(user_id) or is_cashier(user_id)):
        await query.edit_message_text(
            text="‚õî B·∫°n kh√¥ng c√≥ quy·ªÅn xem danh s√°ch ƒë∆°n h√†ng.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='back_to_main')]])
        )
        return MAIN_MENU
    
    # Hi·ªán th√¥ng b√°o t·∫°m th·ªùi
    await query.edit_message_text(
        text="üîÑ Ch·ª©c nƒÉng xem danh s√°ch ƒë∆°n h√†ng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn.\n\nVui l√≤ng quay l·∫°i sau!",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='back_to_main')]])
    )
    
    return MAIN_MENU

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """H·ªßy b·ªè h·ªôi tho·∫°i hi·ªán t·∫°i v√† quay l·∫°i ƒëi·ªÉm ban ƒë·∫ßu."""
    await update.message.reply_text(
        f"ƒê√£ h·ªßy thao t√°c. G√µ /start ƒë·ªÉ b·∫Øt ƒë·∫ßu l·∫°i.",
        reply_markup=ReplyKeyboardRemove()
    )
    
    return ConversationHandler.END

async def mark_order_preparing(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """ƒê√°nh d·∫•u ƒë∆°n h√†ng ƒëang ƒë∆∞·ª£c chu·∫©n b·ªã"""
    query = update.callback_query
    await query.answer()
    
    # L·∫•y ID ƒë∆°n h√†ng t·ª´ callback data
    order_id = int(query.data.split('_')[-1])
    
    # C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
    conn = get_db_connection()
    try:
        cursor = conn.cursor()
        
        # Ki·ªÉm tra xem ƒë∆°n h√†ng c√≥ t·ªìn t·∫°i kh√¥ng
        cursor.execute("""
            SELECT o.id, o.product_id, o.quantity, o.table_id, o.status, p.name, t.name
            FROM orders o
            JOIN products p ON o.product_id = p.id
            JOIN tables t ON o.table_id = t.id
            WHERE o.id = ?
        """, (order_id,))
        
        order = cursor.fetchone()
        if not order:
            await query.edit_message_text(
                text="‚ùå Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='back_to_main')]])
            )
            return ORDER_PREPARATION
        
        # L·∫•y th√¥ng tin ƒë∆°n h√†ng
        _, product_id, quantity, table_id, status, product_name, table_name = order
        
        # Ki·ªÉm tra tr·∫°ng th√°i hi·ªán t·∫°i
        if status != 'pending':
            await query.edit_message_text(
                text=f"‚ö†Ô∏è ƒê∆°n h√†ng ƒë√£ ·ªü tr·∫°ng th√°i {status}, kh√¥ng th·ªÉ ƒë√°nh d·∫•u l√† ƒëang chu·∫©n b·ªã.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='back_to_main')]])
            )
            return ORDER_PREPARATION
        
        # C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
        cursor.execute("""
            UPDATE orders
            SET status = 'preparing', update_time = ?
            WHERE id = ?
        """, (datetime.now().isoformat(), order_id))
        conn.commit()
        
        # G·ª≠i th√¥ng b√°o ƒë·∫øn nh√≥m
        user = update.effective_user
        user_name = f"{user.first_name} {user.last_name or ''}"
        
        notification_message = (
            f"üîÑ *TH√îNG B√ÅO CHU·∫®N B·ªä ƒê∆†N H√ÄNG*\n\n"
            f"üë®‚Äçüç≥ Ng∆∞·ªùi th·ª±c hi·ªán: *{user_name}*\n"
            f"ü™ë B√†n: *{table_name}*\n"
            f"üçΩÔ∏è M√≥n: *{product_name}* (x{quantity})\n"
            f"‚è∞ Th·ªùi gian: {datetime.now().strftime('%H:%M:%S %d/%m/%Y')}\n\n"
            f"‚úÖ ƒê∆°n h√†ng ƒëang ƒë∆∞·ª£c chu·∫©n b·ªã."
        )
        
        # G·ª≠i th√¥ng b√°o kh√¥ng ƒë·ªìng b·ªô ƒë·ªÉ kh√¥ng l√†m ch·∫≠m lu·ªìng ch√≠nh
        asyncio.create_task(send_group_notification(context, notification_message))
        
        # Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
        await query.edit_message_text(
            text=f"‚úÖ *ƒê∆°n h√†ng ƒëang ƒë∆∞·ª£c chu·∫©n b·ªã*\n\n"
                f"‚Ä¢ B√†n: {table_name}\n"
                f"‚Ä¢ M√≥n: {product_name} (x{quantity})\n\n"
                f"B·∫°n c√≥ th·ªÉ ƒë√°nh d·∫•u ƒë∆°n h√†ng n√†y l√† ƒë√£ s·∫µn s√†ng khi ho√†n th√†nh.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ ƒê√°nh d·∫•u ƒë√£ s·∫µn s√†ng", callback_data=f"order_ready_{order_id}")],
                [InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data="back_to_main")]
            ]),
            parse_mode='Markdown'
        )
        
        return ORDER_PREPARATION
    except Exception as e:
        logger.error(f"L·ªói khi ƒë√°nh d·∫•u ƒë∆°n h√†ng ƒëang chu·∫©n b·ªã: {str(e)}")
        
        if conn:
            conn.rollback()
            
        await query.edit_message_text(
            text=f"‚ùå ƒê√£ x·∫£y ra l·ªói: {str(e)}",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='back_to_main')]])
        )
        return ORDER_PREPARATION
    finally:
        if conn:
            conn.close()

async def mark_order_ready(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """ƒê√°nh d·∫•u ƒë∆°n h√†ng ƒë√£ s·∫µn s√†ng"""
    query = update.callback_query
    await query.answer()
    
    # L·∫•y ID ƒë∆°n h√†ng t·ª´ callback data
    order_id = int(query.data.split('_')[-1])
    
    # C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
    conn = get_db_connection()
    try:
        cursor = conn.cursor()
        
        # Ki·ªÉm tra xem ƒë∆°n h√†ng c√≥ t·ªìn t·∫°i kh√¥ng
        cursor.execute("""
            SELECT o.id, o.product_id, o.quantity, o.table_id, o.status, p.name, t.name
            FROM orders o
            JOIN products p ON o.product_id = p.id
            JOIN tables t ON o.table_id = t.id
            WHERE o.id = ?
        """, (order_id,))
        
        order = cursor.fetchone()
        if not order:
            await query.edit_message_text(
                text="‚ùå Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='back_to_main')]])
            )
            return ORDER_PREPARATION
        
        # L·∫•y th√¥ng tin ƒë∆°n h√†ng
        _, product_id, quantity, table_id, status, product_name, table_name = order
        
        # Ki·ªÉm tra tr·∫°ng th√°i hi·ªán t·∫°i
        if status != 'preparing':
            await query.edit_message_text(
                text=f"‚ö†Ô∏è ƒê∆°n h√†ng kh√¥ng ·ªü tr·∫°ng th√°i ƒëang chu·∫©n b·ªã, kh√¥ng th·ªÉ ƒë√°nh d·∫•u l√† ƒë√£ s·∫µn s√†ng.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='back_to_main')]])
            )
            return ORDER_PREPARATION
        
        # C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
        cursor.execute("""
            UPDATE orders
            SET status = 'ready', update_time = ?
            WHERE id = ?
        """, (datetime.now().isoformat(), order_id))
        conn.commit()
        
        # G·ª≠i th√¥ng b√°o ƒë·∫øn nh√≥m
        user = update.effective_user
        user_name = f"{user.first_name} {user.last_name or ''}"
        
        notification_message = (
            f"‚úÖ *TH√îNG B√ÅO ƒê∆†N H√ÄNG S·∫¥N S√ÄNG*\n\n"
            f"üë®‚Äçüç≥ Ng∆∞·ªùi th·ª±c hi·ªán: *{user_name}*\n"
            f"ü™ë B√†n: *{table_name}*\n"
            f"üçΩÔ∏è M√≥n: *{product_name}* (x{quantity})\n"
            f"‚è∞ Th·ªùi gian: {datetime.now().strftime('%H:%M:%S %d/%m/%Y')}\n\n"
            f"‚úÖ ƒê∆°n h√†ng ƒë√£ s·∫µn s√†ng ph·ª•c v·ª•."
        )
        
        # G·ª≠i th√¥ng b√°o kh√¥ng ƒë·ªìng b·ªô ƒë·ªÉ kh√¥ng l√†m ch·∫≠m lu·ªìng ch√≠nh
        asyncio.create_task(send_group_notification(context, notification_message))
        
        # Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
        await query.edit_message_text(
            text=f"‚úÖ *ƒê∆°n h√†ng ƒë√£ s·∫µn s√†ng*\n\n"
                f"‚Ä¢ B√†n: {table_name}\n"
                f"‚Ä¢ M√≥n: {product_name} (x{quantity})\n\n"
                f"ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c ƒë√°nh d·∫•u l√† s·∫µn s√†ng ph·ª•c v·ª•.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data="back_to_main")]
            ]),
            parse_mode='Markdown'
        )
        
        return ORDER_PREPARATION
    except Exception as e:
        logger.error(f"L·ªói khi ƒë√°nh d·∫•u ƒë∆°n h√†ng ƒë√£ s·∫µn s√†ng: {str(e)}")
        
        if conn:
            conn.rollback()
            
        await query.edit_message_text(
            text=f"‚ùå ƒê√£ x·∫£y ra l·ªói: {str(e)}",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data='back_to_main')]])
        )
        return ORDER_PREPARATION
    finally:
        if conn:
            conn.close()

def main() -> None:
    """H√†m kh·ªüi ƒë·ªông bot"""
    # T·∫°o application
def main() -> None:
    """H√†m kh·ªüi ƒë·ªông bot"""
    # T·∫°o application
    application = Application.builder().token(TOKEN).build()

    # Th√™m handlers
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            MAIN_MENU: [
                CallbackQueryHandler(admin_panel, pattern="^admin_panel$"),
                CallbackQueryHandler(admin_manage_tables, pattern="^manage_tables$"),
                CallbackQueryHandler(admin_manage_products, pattern="^manage_products$"),
                CallbackQueryHandler(place_order, pattern="^place_order$"),
                CallbackQueryHandler(view_orders, pattern="^view_orders$"),
                CallbackQueryHandler(view_bills, pattern="^view_bills$"),
                CallbackQueryHandler(process_payment, pattern="^process_payment$"),
                CallbackQueryHandler(request_bill, pattern="^request_bill$"),
                CallbackQueryHandler(admin_reports, pattern="^view_reports$"),
                CallbackQueryHandler(show_tables, pattern="^reserve_table$"),
                CallbackQueryHandler(start, pattern="^back_to_main$"),
                CallbackQueryHandler(add_new_table, pattern="^add_new_table$"),
                CallbackQueryHandler(create_table, pattern="^create_table_"),
                # C√°c handlers kh√°c...
            ],
            ADMIN_MENU: [
                CallbackQueryHandler(admin_manage_tables, pattern="^manage_tables$"),
                CallbackQueryHandler(admin_manage_products, pattern="^manage_products$"),
                CallbackQueryHandler(view_bills, pattern="^view_bills$"),
                CallbackQueryHandler(admin_reports, pattern="^view_reports$"),
                CallbackQueryHandler(reset_all_tables, pattern="^reset_all_tables$"),
                CallbackQueryHandler(start, pattern="^back_to_main$"),
                CallbackQueryHandler(add_new_table, pattern="^add_new_table$"),
                CallbackQueryHandler(create_table, pattern="^create_table_"),
                CallbackQueryHandler(edit_table_info, pattern="^edit_table_info$"),
                CallbackQueryHandler(edit_table_capacity, pattern="^edit_table_"),
                CallbackQueryHandler(update_table_capacity, pattern="^update_table_"),
                CallbackQueryHandler(delete_table, pattern="^delete_table$"),
                CallbackQueryHandler(manage_table_status, pattern="^manage_table_status$"),
                CallbackQueryHandler(quick_payment_by_table, pattern="^quick_payment_by_table$"),
                # C√°c handlers kh√°c...
            ],
            ORDER_ITEMS: [
                CallbackQueryHandler(show_category_products, pattern="^category_"),
                CallbackQueryHandler(edit_product, pattern="^product_"),
                CallbackQueryHandler(add_to_cart, pattern="^add_"),
                CallbackQueryHandler(view_cart, pattern="^view_cart$"),
                CallbackQueryHandler(start, pattern="^back_to_main$"),
                CallbackQueryHandler(show_tables, pattern="^select_table$"),
                CallbackQueryHandler(order_more, pattern="^order_more$"),
                # C√°c handlers kh√°c...
            ],
            ORDER_PREPARATION: [
                CallbackQueryHandler(mark_order_preparing, pattern="^order_preparing_"),
                CallbackQueryHandler(mark_order_ready, pattern="^order_ready_"),
            ],
            # C√°c states kh√°c...
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    application.add_handler(conv_handler)

    # Add standalone handlers for order preparation callbacks (works in any context)
    application.add_handler(CallbackQueryHandler(mark_order_preparing, pattern="^order_preparing_"))
    application.add_handler(CallbackQueryHandler(mark_order_ready, pattern="^order_ready_"))
    
    # Add handlers for table deletion process
    application.add_handler(CallbackQueryHandler(pre_confirm_delete_table, pattern="^pre_confirm_delete_table_"))
    application.add_handler(CallbackQueryHandler(confirm_delete_table, pattern="^confirm_delete_table_"))
    
    # Add handlers for table payment process
    application.add_handler(CallbackQueryHandler(quick_payment_by_table, pattern="^quick_payment_by_table$"))
    application.add_handler(CallbackQueryHandler(pay_table, pattern="^pay_table_"))
    application.add_handler(CallbackQueryHandler(confirm_pay_table, pattern="^confirm_pay_table_"))
    
    # Start the bot
    application.run_polling()

if __name__ == "__main__":
    main()